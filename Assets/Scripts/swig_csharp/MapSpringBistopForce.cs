//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MapSpringBistopForce : ForceFunctor {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal MapSpringBistopForce(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.MapSpringBistopForce_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MapSpringBistopForce obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_MapSpringBistopForce(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MapSpringBistopForce(double spring_min_length, double spring_max_length) : this(vehiclePINVOKE.new_MapSpringBistopForce__SWIG_0(spring_min_length, spring_max_length), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public MapSpringBistopForce(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t data, double spring_min_length, double spring_max_length) : this(vehiclePINVOKE.new_MapSpringBistopForce__SWIG_1(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t.getCPtr(data), spring_min_length, spring_max_length), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_point(double x, double y) {
    vehiclePINVOKE.MapSpringBistopForce_add_point(swigCPtr, x, y);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
