//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SCMDeformableTerrain : ChTerrain {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal SCMDeformableTerrain(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.SCMDeformableTerrain_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SCMDeformableTerrain obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_SCMDeformableTerrain(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SCMDeformableTerrain(ChSystem system, bool visualization_mesh) : this(vehiclePINVOKE.new_SCMDeformableTerrain__SWIG_0(ChSystem.getCPtr(system), visualization_mesh), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public SCMDeformableTerrain(ChSystem system) : this(vehiclePINVOKE.new_SCMDeformableTerrain__SWIG_1(ChSystem.getCPtr(system)), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPlane(ChCoordsysD mplane) {
    vehiclePINVOKE.SCMDeformableTerrain_SetPlane(swigCPtr, ChCoordsysD.getCPtr(mplane));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSoilParameters(double Bekker_Kphi, double Bekker_Kc, double Bekker_n, double Mohr_cohesion, double Mohr_friction, double Janosi_shear, double elastic_K, double damping_R) {
    vehiclePINVOKE.SCMDeformableTerrain_SetSoilParameters(swigCPtr, Bekker_Kphi, Bekker_Kc, Bekker_n, Mohr_cohesion, Mohr_friction, Janosi_shear, elastic_K, damping_R);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBulldozingFlow(bool mb) {
    vehiclePINVOKE.SCMDeformableTerrain_SetBulldozingFlow(swigCPtr, mb);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetBulldozingFlow() {
    bool ret = vehiclePINVOKE.SCMDeformableTerrain_GetBulldozingFlow(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetBulldozingParameters(double mbulldozing_erosion_angle, double mbulldozing_flow_factor, int mbulldozing_erosion_n_iterations, int mbulldozing_erosion_n_propagations) {
    vehiclePINVOKE.SCMDeformableTerrain_SetBulldozingParameters__SWIG_0(swigCPtr, mbulldozing_erosion_angle, mbulldozing_flow_factor, mbulldozing_erosion_n_iterations, mbulldozing_erosion_n_propagations);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBulldozingParameters(double mbulldozing_erosion_angle, double mbulldozing_flow_factor, int mbulldozing_erosion_n_iterations) {
    vehiclePINVOKE.SCMDeformableTerrain_SetBulldozingParameters__SWIG_1(swigCPtr, mbulldozing_erosion_angle, mbulldozing_flow_factor, mbulldozing_erosion_n_iterations);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBulldozingParameters(double mbulldozing_erosion_angle, double mbulldozing_flow_factor) {
    vehiclePINVOKE.SCMDeformableTerrain_SetBulldozingParameters__SWIG_2(swigCPtr, mbulldozing_erosion_angle, mbulldozing_flow_factor);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBulldozingParameters(double mbulldozing_erosion_angle) {
    vehiclePINVOKE.SCMDeformableTerrain_SetBulldozingParameters__SWIG_3(swigCPtr, mbulldozing_erosion_angle);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAutomaticRefinement(bool mr) {
    vehiclePINVOKE.SCMDeformableTerrain_SetAutomaticRefinement(swigCPtr, mr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetAutomaticRefinement() {
    bool ret = vehiclePINVOKE.SCMDeformableTerrain_GetAutomaticRefinement(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAutomaticRefinementResolution(double mr) {
    vehiclePINVOKE.SCMDeformableTerrain_SetAutomaticRefinementResolution(swigCPtr, mr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetAutomaticRefinementResolution() {
    double ret = vehiclePINVOKE.SCMDeformableTerrain_GetAutomaticRefinementResolution(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTestHighOffset(double moff) {
    vehiclePINVOKE.SCMDeformableTerrain_SetTestHighOffset(swigCPtr, moff);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTestHighOffset() {
    double ret = vehiclePINVOKE.SCMDeformableTerrain_GetTestHighOffset(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPlotType(SCMDeformableTerrain.DataPlotType mplot, double mmin, double mmax) {
    vehiclePINVOKE.SCMDeformableTerrain_SetPlotType(swigCPtr, (int)mplot, mmin, mmax);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetColor(ChColor color) {
    vehiclePINVOKE.SCMDeformableTerrain_SetColor(swigCPtr, ChColor.getCPtr(color));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTexture(string tex_file, float tex_scale_x, float tex_scale_y) {
    vehiclePINVOKE.SCMDeformableTerrain_SetTexture__SWIG_0(swigCPtr, tex_file, tex_scale_x, tex_scale_y);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTexture(string tex_file, float tex_scale_x) {
    vehiclePINVOKE.SCMDeformableTerrain_SetTexture__SWIG_1(swigCPtr, tex_file, tex_scale_x);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTexture(string tex_file) {
    vehiclePINVOKE.SCMDeformableTerrain_SetTexture__SWIG_2(swigCPtr, tex_file);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddMovingPatch(ChBody body, ChVectorD point_on_body, double dimX, double dimY) {
    vehiclePINVOKE.SCMDeformableTerrain_AddMovingPatch(swigCPtr, ChBody.getCPtr(body), ChVectorD.getCPtr(point_on_body), dimX, dimY);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterSoilParametersCallback(SoilParametersCallback cb) {
    vehiclePINVOKE.SCMDeformableTerrain_RegisterSoilParametersCallback(swigCPtr, SoilParametersCallback.getCPtr(cb));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override double GetHeight(ChVectorD loc) {
    double ret = vehiclePINVOKE.SCMDeformableTerrain_GetHeight(swigCPtr, ChVectorD.getCPtr(loc));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVectorD GetNormal(ChVectorD loc) {
    ChVectorD ret = new ChVectorD(vehiclePINVOKE.SCMDeformableTerrain_GetNormal(swigCPtr, ChVectorD.getCPtr(loc)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override float GetCoefficientFriction(ChVectorD loc) {
    float ret = vehiclePINVOKE.SCMDeformableTerrain_GetCoefficientFriction(swigCPtr, ChVectorD.getCPtr(loc));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysD GetPlane() {
    ChCoordsysD ret = new ChCoordsysD(vehiclePINVOKE.SCMDeformableTerrain_GetPlane(swigCPtr), false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTriangleMeshShape GetMesh() {
    global::System.IntPtr cPtr = vehiclePINVOKE.SCMDeformableTerrain_GetMesh(swigCPtr);
    ChTriangleMeshShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshShape(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initialize(double height, double sizeX, double sizeY, int divX, int divY) {
    vehiclePINVOKE.SCMDeformableTerrain_Initialize__SWIG_0(swigCPtr, height, sizeX, sizeY, divX, divY);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(string mesh_file) {
    vehiclePINVOKE.SCMDeformableTerrain_Initialize__SWIG_1(swigCPtr, mesh_file);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(string heightmap_file, string mesh_name, double sizeX, double sizeY, double hMin, double hMax, int divX, int divY) {
    vehiclePINVOKE.SCMDeformableTerrain_Initialize__SWIG_2(swigCPtr, heightmap_file, mesh_name, sizeX, sizeY, hMin, hMax, divX, divY);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(string heightmap_file, string mesh_name, double sizeX, double sizeY, double hMin, double hMax, int divX) {
    vehiclePINVOKE.SCMDeformableTerrain_Initialize__SWIG_3(swigCPtr, heightmap_file, mesh_name, sizeX, sizeY, hMin, hMax, divX);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(string heightmap_file, string mesh_name, double sizeX, double sizeY, double hMin, double hMax) {
    vehiclePINVOKE.SCMDeformableTerrain_Initialize__SWIG_4(swigCPtr, heightmap_file, mesh_name, sizeX, sizeY, hMin, hMax);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public TerrainForce GetContactForce(ChBody body) {
    TerrainForce ret = new TerrainForce(vehiclePINVOKE.SCMDeformableTerrain_GetContactForce(swigCPtr, ChBody.getCPtr(body)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void PrintStepStatistics(SWIGTYPE_p_std__ostream os) {
    vehiclePINVOKE.SCMDeformableTerrain_PrintStepStatistics(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(os));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum DataPlotType {
    PLOT_NONE,
    PLOT_LEVEL,
    PLOT_LEVEL_INITIAL,
    PLOT_SINKAGE,
    PLOT_SINKAGE_ELASTIC,
    PLOT_SINKAGE_PLASTIC,
    PLOT_STEP_PLASTIC_FLOW,
    PLOT_PRESSURE,
    PLOT_PRESSURE_YELD,
    PLOT_SHEAR,
    PLOT_K_JANOSI,
    PLOT_IS_TOUCHED,
    PLOT_ISLAND_ID,
    PLOT_MASSREMAINDER
  }

}
