//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChPacejkaTire : ChTire {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChPacejkaTire(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChPacejkaTire_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChPacejkaTire obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_ChPacejkaTire(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override string GetTemplateName() {
    string ret = vehiclePINVOKE.ChPacejkaTire_GetTemplateName(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDrivenWheel(bool val) {
    vehiclePINVOKE.ChPacejkaTire_SetDrivenWheel(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void AddVisualizationAssets(VisualizationType vis) {
    vehiclePINVOKE.ChPacejkaTire_AddVisualizationAssets(swigCPtr, (int)vis);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void RemoveVisualizationAssets() {
    vehiclePINVOKE.ChPacejkaTire_RemoveVisualizationAssets(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override double GetRadius() {
    double ret = vehiclePINVOKE.ChPacejkaTire_GetRadius(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetWidth() {
    double ret = vehiclePINVOKE.ChPacejkaTire_GetWidth(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetVisualizationWidth() {
    double ret = vehiclePINVOKE.ChPacejkaTire_GetVisualizationWidth(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TerrainForce ReportTireForce(ChTerrain terrain) {
    TerrainForce ret = new TerrainForce(vehiclePINVOKE.ChPacejkaTire_ReportTireForce(swigCPtr, ChTerrain.getCPtr(terrain)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainForce GetTireForce_pureSlip(bool local) {
    TerrainForce ret = new TerrainForce(vehiclePINVOKE.ChPacejkaTire_GetTireForce_pureSlip__SWIG_0(swigCPtr, local), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainForce GetTireForce_pureSlip() {
    TerrainForce ret = new TerrainForce(vehiclePINVOKE.ChPacejkaTire_GetTireForce_pureSlip__SWIG_1(swigCPtr), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainForce GetTireForce_combinedSlip(bool local) {
    TerrainForce ret = new TerrainForce(vehiclePINVOKE.ChPacejkaTire_GetTireForce_combinedSlip__SWIG_0(swigCPtr, local), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TerrainForce GetTireForce_combinedSlip() {
    TerrainForce ret = new TerrainForce(vehiclePINVOKE.ChPacejkaTire_GetTireForce_combinedSlip__SWIG_1(swigCPtr), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSlipAngle_internal() {
    double ret = vehiclePINVOKE.ChPacejkaTire_GetSlipAngle_internal(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetLongitudinalSlip_internal() {
    double ret = vehiclePINVOKE.ChPacejkaTire_GetLongitudinalSlip_internal(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetCamberAngle_internal() {
    double ret = vehiclePINVOKE.ChPacejkaTire_GetCamberAngle_internal(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void WriteOutData(double time, string outFilename) {
    vehiclePINVOKE.ChPacejkaTire_WriteOutData(swigCPtr, time, outFilename);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_Fz_override(double Fz) {
    vehiclePINVOKE.ChPacejkaTire_set_Fz_override(swigCPtr, Fz);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public WheelState getState_from_KAG(double kappa, double alpha, double gamma, double Vx) {
    WheelState ret = new WheelState(vehiclePINVOKE.ChPacejkaTire_getState_from_KAG(swigCPtr, kappa, alpha, gamma, Vx), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_average_Advance_time() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_average_Advance_time(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_average_ODE_time() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_average_ODE_time(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_kappa() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_kappa(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_alpha() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_alpha(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_gamma() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_gamma(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_kappaPrime() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_kappaPrime(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_alphaPrime() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_alphaPrime(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_gammaPrime() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_gammaPrime(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_min_long_slip() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_min_long_slip(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_max_long_slip() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_max_long_slip(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_min_lat_slip() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_min_lat_slip(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_max_lat_slip() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_max_lat_slip(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_longvl() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_longvl(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_tire_rolling_rad() {
    double ret = vehiclePINVOKE.ChPacejkaTire_get_tire_rolling_rad(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
