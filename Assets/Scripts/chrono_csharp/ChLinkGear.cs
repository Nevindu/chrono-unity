//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkGear : ChLinkLock {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkGear(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ChronoEngine_csharpPINVOKE.ChLinkGear_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkGear obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ChronoEngine_csharpPINVOKE.delete_ChLinkGear(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkGear() : this(ChronoEngine_csharpPINVOKE.new_ChLinkGear__SWIG_0(), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkGear(ChLinkGear other) : this(ChronoEngine_csharpPINVOKE.new_ChLinkGear__SWIG_1(ChLinkGear.getCPtr(other)), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChObj Clone() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChLinkGear_Clone(swigCPtr);
    ChLinkGear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkGear(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void UpdateTime(double mytime) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_UpdateTime(swigCPtr, mytime);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Get_tau() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_tau(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_tau(double mset) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_tau__SWIG_0(swigCPtr, mset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_tau(double mz1, double mz2) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_tau__SWIG_1(swigCPtr, mz1, mz2);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Get_alpha() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_alpha(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_alpha(double mset) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_alpha(swigCPtr, mset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Get_beta() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_beta(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_beta(double mset) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_beta(swigCPtr, mset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Get_phase() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_phase(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_phase(double mset) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_phase(swigCPtr, mset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Get_epicyclic() {
    bool ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_epicyclic(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_epicyclic(bool mset) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_epicyclic(swigCPtr, mset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_checkphase(bool mset) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_checkphase(swigCPtr, mset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Get_checkphase() {
    bool ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_checkphase(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_a1() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_a1(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_a2() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_a2(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reset_a1a2() {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Reset_a1a2(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Get_r1() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_r1(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_r2() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkGear_Get_r2(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFrameD Get_local_shaft1() {
    ChFrameD ret = new ChFrameD(ChronoEngine_csharpPINVOKE.ChLinkGear_Get_local_shaft1(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_local_shaft1(ChFrameD mf) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_local_shaft1(swigCPtr, ChFrameD.getCPtr(mf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFrameD Get_local_shaft2() {
    ChFrameD ret = new ChFrameD(ChronoEngine_csharpPINVOKE.ChLinkGear_Get_local_shaft2(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_local_shaft2(ChFrameD mf) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_Set_local_shaft2(swigCPtr, ChFrameD.getCPtr(mf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD Get_shaft_dir1() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChLinkGear_Get_shaft_dir1(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD Get_shaft_dir2() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChLinkGear_Get_shaft_dir2(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD Get_shaft_pos1() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChLinkGear_Get_shaft_pos1(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD Get_shaft_pos2() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChLinkGear_Get_shaft_pos2(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOUT(SWIGTYPE_p_ChArchiveOut marchive) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_ArchiveOUT(swigCPtr, SWIGTYPE_p_ChArchiveOut.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIN(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    ChronoEngine_csharpPINVOKE.ChLinkGear_ArchiveIN(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

}
