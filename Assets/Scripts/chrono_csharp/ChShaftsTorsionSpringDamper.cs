//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChShaftsTorsionSpringDamper : ChShaftsLoad {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChShaftsTorsionSpringDamper(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ChronoEngine_csharpPINVOKE.ChShaftsTorsionSpringDamper_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChShaftsTorsionSpringDamper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ChronoEngine_csharpPINVOKE.delete_ChShaftsTorsionSpringDamper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChShaftsTorsionSpringDamper(ChShaft mbodyA, ChShaft mbodyB, double mstiffness, double mdamping) : this(ChronoEngine_csharpPINVOKE.new_ChShaftsTorsionSpringDamper(ChShaft.getCPtr(mbodyA), ChShaft.getCPtr(mbodyB), mstiffness, mdamping), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChObj Clone() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChShaftsTorsionSpringDamper_Clone(swigCPtr);
    ChShaftsTorsionSpringDamper ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsTorsionSpringDamper(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTorsionalStiffness(double mstiffness) {
    ChronoEngine_csharpPINVOKE.ChShaftsTorsionSpringDamper_SetTorsionalStiffness(swigCPtr, mstiffness);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTorsionalStiffness() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsTorsionSpringDamper_GetTorsionalStiffness(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTorsionalDamping(double mdamping) {
    ChronoEngine_csharpPINVOKE.ChShaftsTorsionSpringDamper_SetTorsionalDamping(swigCPtr, mdamping);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTorsionalDamping() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsTorsionSpringDamper_GetTorsionalDamping(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRestPhase(double mphase) {
    ChronoEngine_csharpPINVOKE.ChShaftsTorsionSpringDamper_SetRestPhase(swigCPtr, mphase);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRestPhase() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsTorsionSpringDamper_GetRestPhase(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
