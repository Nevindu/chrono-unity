//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChMarker : ChObj {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChMarker(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ChronoEngine_csharpPINVOKE.ChMarker_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChMarker obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ChronoEngine_csharpPINVOKE.delete_ChMarker(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChMarker() : this(ChronoEngine_csharpPINVOKE.new_ChMarker__SWIG_0(), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMarker(string name, ChBody body, ChCoordsysD rel_pos, ChCoordsysD rel_pos_dt, ChCoordsysD rel_pos_dtdt) : this(ChronoEngine_csharpPINVOKE.new_ChMarker__SWIG_1(name, ChBody.getCPtr(body), ChCoordsysD.getCPtr(rel_pos), ChCoordsysD.getCPtr(rel_pos_dt), ChCoordsysD.getCPtr(rel_pos_dtdt)), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMarker(ChMarker other) : this(ChronoEngine_csharpPINVOKE.new_ChMarker__SWIG_2(ChMarker.getCPtr(other)), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChObj Clone() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChMarker_Clone(swigCPtr);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody GetBody() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChMarker_GetBody(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetBody(ChBody newRB) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetBody(swigCPtr, ChBody.getCPtr(newRB));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Impose_Rel_Coord(ChCoordsysD m_coord) {
    ChronoEngine_csharpPINVOKE.ChMarker_Impose_Rel_Coord(swigCPtr, ChCoordsysD.getCPtr(m_coord));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Impose_Abs_Coord(ChCoordsysD m_coord) {
    ChronoEngine_csharpPINVOKE.ChMarker_Impose_Abs_Coord(swigCPtr, ChCoordsysD.getCPtr(m_coord));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCoordsysD GetRest_Coord() {
    ChCoordsysD ret = new ChCoordsysD(ChronoEngine_csharpPINVOKE.ChMarker_GetRest_Coord(swigCPtr), false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFrameMovingD GetAbsFrame() {
    ChFrameMovingD ret = new ChFrameMovingD(ChronoEngine_csharpPINVOKE.ChMarker_GetAbsFrame(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysD GetAbsCoord() {
    ChCoordsysD ret = new ChCoordsysD(ChronoEngine_csharpPINVOKE.ChMarker_GetAbsCoord(swigCPtr), false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysD GetAbsCoord_dt() {
    ChCoordsysD ret = new ChCoordsysD(ChronoEngine_csharpPINVOKE.ChMarker_GetAbsCoord_dt(swigCPtr), false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysD GetAbsCoord_dtdt() {
    ChCoordsysD ret = new ChCoordsysD(ChronoEngine_csharpPINVOKE.ChMarker_GetAbsCoord_dtdt(swigCPtr), false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAbsCoord(ChCoordsysD newpos) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetAbsCoord(swigCPtr, ChCoordsysD.getCPtr(newpos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAbsCoord_dt(ChCoordsysD newpos_dt) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetAbsCoord_dt(swigCPtr, ChCoordsysD.getCPtr(newpos_dt));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAbsCoord_dtdt(ChCoordsysD newpos_dtdt) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetAbsCoord_dtdt(swigCPtr, ChCoordsysD.getCPtr(newpos_dtdt));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD GetAbsWvel() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChMarker_GetAbsWvel(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetAbsWacc() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChMarker_GetAbsWacc(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMotion_X(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetMotion_X(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotion_Y(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetMotion_Y(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotion_Z(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetMotion_Z(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotion_ang(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetMotion_ang(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotion_axis(ChVectorD m_axis) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetMotion_axis(swigCPtr, ChVectorD.getCPtr(m_axis));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetMotion_X() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChMarker_GetMotion_X(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotion_Y() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChMarker_GetMotion_Y(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotion_Z() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChMarker_GetMotion_Z(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotion_ang() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChMarker_GetMotion_ang(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetMotion_axis() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChMarker_GetMotion_axis(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMotionType(ChMarker.eChMarkerMotion m_motion) {
    ChronoEngine_csharpPINVOKE.ChMarker_SetMotionType(swigCPtr, (int)m_motion);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMarker.eChMarkerMotion GetMotionType() {
    ChMarker.eChMarkerMotion ret = (ChMarker.eChMarkerMotion)ChronoEngine_csharpPINVOKE.ChMarker_GetMotionType(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateTime(double mytime) {
    ChronoEngine_csharpPINVOKE.ChMarker_UpdateTime(swigCPtr, mytime);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateState() {
    ChronoEngine_csharpPINVOKE.ChMarker_UpdateState(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(double mytime) {
    ChronoEngine_csharpPINVOKE.ChMarker_Update(swigCPtr, mytime);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdatedExternalTime(double prevtime, double mtime) {
    ChronoEngine_csharpPINVOKE.ChMarker_UpdatedExternalTime(swigCPtr, prevtime, mtime);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD Point_World2Ref(ChVectorD point) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChMarker_Point_World2Ref(swigCPtr, ChVectorD.getCPtr(point)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD Point_Ref2World(ChVectorD point) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChMarker_Point_Ref2World(swigCPtr, ChVectorD.getCPtr(point)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD Dir_World2Ref(ChVectorD dir) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChMarker_Dir_World2Ref(swigCPtr, ChVectorD.getCPtr(dir)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD Dir_Ref2World(ChVectorD dir) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChMarker_Dir_Ref2World(swigCPtr, ChVectorD.getCPtr(dir)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOUT(SWIGTYPE_p_ChArchiveOut marchive) {
    ChronoEngine_csharpPINVOKE.ChMarker_ArchiveOUT(swigCPtr, SWIGTYPE_p_ChArchiveOut.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIN(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    ChronoEngine_csharpPINVOKE.ChMarker_ArchiveIN(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum eChMarkerMotion {
    M_MOTION_FUNCTIONS = 0,
    M_MOTION_KEYFRAMED = 1,
    M_MOTION_EXTERNAL = 2
  }

}
