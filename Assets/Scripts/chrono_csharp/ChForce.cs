//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChForce : ChObj {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChForce(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ChronoEngine_csharpPINVOKE.ChForce_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChForce obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ChronoEngine_csharpPINVOKE.delete_ChForce(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChForce() : this(ChronoEngine_csharpPINVOKE.new_ChForce__SWIG_0(), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChForce(ChForce other) : this(ChronoEngine_csharpPINVOKE.new_ChForce__SWIG_1(ChForce.getCPtr(other)), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChObj Clone() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_Clone(swigCPtr);
    ChForce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChForce(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody GetBody() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_GetBody(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetBody(ChBody newRB) {
    ChronoEngine_csharpPINVOKE.ChForce_SetBody(swigCPtr, ChBody.getCPtr(newRB));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMode(ChForce.ForceType m_mode) {
    ChronoEngine_csharpPINVOKE.ChForce_SetMode(swigCPtr, (int)m_mode);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChForce.ForceType GetMode() {
    ChForce.ForceType ret = (ChForce.ForceType)ChronoEngine_csharpPINVOKE.ChForce_GetMode(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAlign(ChForce.AlignmentFrame m_align) {
    ChronoEngine_csharpPINVOKE.ChForce_SetAlign(swigCPtr, (int)m_align);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChForce.AlignmentFrame GetAlign() {
    ChForce.AlignmentFrame ret = (ChForce.AlignmentFrame)ChronoEngine_csharpPINVOKE.ChForce_GetAlign(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFrame(ChForce.ReferenceFrame m_frame) {
    ChronoEngine_csharpPINVOKE.ChForce_SetFrame(swigCPtr, (int)m_frame);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChForce.ReferenceFrame GetFrame() {
    ChForce.ReferenceFrame ret = (ChForce.ReferenceFrame)ChronoEngine_csharpPINVOKE.ChForce_GetFrame(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetVpoint() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChForce_GetVpoint(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetVrelpoint() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChForce_GetVrelpoint(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetVpoint(ChVectorD mypoint) {
    ChronoEngine_csharpPINVOKE.ChForce_SetVpoint(swigCPtr, ChVectorD.getCPtr(mypoint));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVrelpoint(ChVectorD myrelpoint) {
    ChronoEngine_csharpPINVOKE.ChForce_SetVrelpoint(swigCPtr, ChVectorD.getCPtr(myrelpoint));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD GetDir() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChForce_GetDir(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetRelDir() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChForce_GetRelDir(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDir(ChVectorD newf) {
    ChronoEngine_csharpPINVOKE.ChForce_SetDir(swigCPtr, ChVectorD.getCPtr(newf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRelDir(ChVectorD newf) {
    ChronoEngine_csharpPINVOKE.ChForce_SetRelDir(swigCPtr, ChVectorD.getCPtr(newf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMforce(double newf) {
    ChronoEngine_csharpPINVOKE.ChForce_SetMforce(swigCPtr, newf);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMforce() {
    double ret = ChronoEngine_csharpPINVOKE.ChForce_GetMforce(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetModulation(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChForce_SetModulation(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetModulation() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_GetModulation(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMove_x(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChForce_SetMove_x(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetMove_x() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_GetMove_x(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMove_y(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChForce_SetMove_y(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetMove_y() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_GetMove_y(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMove_z(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChForce_SetMove_z(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetMove_z() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_GetMove_z(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetF_x(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChForce_SetF_x(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetF_x() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_GetF_x(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetF_y(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChForce_SetF_y(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetF_y() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_GetF_y(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetF_z(ChFunction m_funct) {
    ChronoEngine_csharpPINVOKE.ChForce_SetF_z(swigCPtr, ChFunction.getCPtr(m_funct));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetF_z() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChForce_GetF_z(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetForce() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChForce_GetForce(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorD GetRelForce() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChForce_GetRelForce(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetForceMod() {
    double ret = ChronoEngine_csharpPINVOKE.ChForce_GetForceMod(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_chrono__ChVectorNT_double_7_t GetQf() {
    SWIGTYPE_p_chrono__ChVectorNT_double_7_t ret = new SWIGTYPE_p_chrono__ChVectorNT_double_7_t(ChronoEngine_csharpPINVOKE.ChForce_GetQf(swigCPtr), false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetBodyForceTorque(ChVectorD body_force, ChVectorD body_torque) {
    ChronoEngine_csharpPINVOKE.ChForce_GetBodyForceTorque(swigCPtr, ChVectorD.getCPtr(body_force), ChVectorD.getCPtr(body_torque));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateTime(double mytime) {
    ChronoEngine_csharpPINVOKE.ChForce_UpdateTime(swigCPtr, mytime);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateState() {
    ChronoEngine_csharpPINVOKE.ChForce_UpdateState(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(double mytime) {
    ChronoEngine_csharpPINVOKE.ChForce_Update(swigCPtr, mytime);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOUT(SWIGTYPE_p_ChArchiveOut marchive) {
    ChronoEngine_csharpPINVOKE.ChForce_ArchiveOUT(swigCPtr, SWIGTYPE_p_ChArchiveOut.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIN(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    ChronoEngine_csharpPINVOKE.ChForce_ArchiveIN(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum ForceType {
    FORCE,
    TORQUE
  }

  public enum ReferenceFrame {
    BODY,
    WORLD
  }

  public enum AlignmentFrame {
    BODY_DIR,
    WORLD_DIR
  }

}
