//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChPathSteeringControllerStanley : ChSteeringController {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ChPathSteeringControllerStanley(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.ChPathSteeringControllerStanley_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChPathSteeringControllerStanley obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          vehiclePINVOKE.delete_ChPathSteeringControllerStanley(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChPathSteeringControllerStanley(ChBezierCurve path, bool isClosedPath, double max_wheel_turn_angle) : this(vehiclePINVOKE.new_ChPathSteeringControllerStanley__SWIG_0(ChBezierCurve.getCPtr(path), isClosedPath, max_wheel_turn_angle), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerStanley(ChBezierCurve path, bool isClosedPath) : this(vehiclePINVOKE.new_ChPathSteeringControllerStanley__SWIG_1(ChBezierCurve.getCPtr(path), isClosedPath), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerStanley(ChBezierCurve path) : this(vehiclePINVOKE.new_ChPathSteeringControllerStanley__SWIG_2(ChBezierCurve.getCPtr(path)), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerStanley(string filename, ChBezierCurve path, bool isClosedPath, double max_wheel_turn_angle) : this(vehiclePINVOKE.new_ChPathSteeringControllerStanley__SWIG_3(filename, ChBezierCurve.getCPtr(path), isClosedPath, max_wheel_turn_angle), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerStanley(string filename, ChBezierCurve path, bool isClosedPath) : this(vehiclePINVOKE.new_ChPathSteeringControllerStanley__SWIG_4(filename, ChBezierCurve.getCPtr(path), isClosedPath), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerStanley(string filename, ChBezierCurve path) : this(vehiclePINVOKE.new_ChPathSteeringControllerStanley__SWIG_5(filename, ChBezierCurve.getCPtr(path)), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBezierCurve GetPath() {
    global::System.IntPtr cPtr = vehiclePINVOKE.ChPathSteeringControllerStanley_GetPath(swigCPtr);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public new void SetGains(double Kp, double Ki, double Kd) {
    vehiclePINVOKE.ChPathSteeringControllerStanley_SetGains__SWIG_0(swigCPtr, Kp, Ki, Kd);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains(double Kp, double Ki) {
    vehiclePINVOKE.ChPathSteeringControllerStanley_SetGains__SWIG_1(swigCPtr, Kp, Ki);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains(double Kp) {
    vehiclePINVOKE.ChPathSteeringControllerStanley_SetGains__SWIG_2(swigCPtr, Kp);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGains() {
    vehiclePINVOKE.ChPathSteeringControllerStanley_SetGains__SWIG_3(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDeadZone(double dead_zone) {
    vehiclePINVOKE.ChPathSteeringControllerStanley_SetDeadZone__SWIG_0(swigCPtr, dead_zone);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDeadZone() {
    vehiclePINVOKE.ChPathSteeringControllerStanley_SetDeadZone__SWIG_1(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public new double Advance(ChVehicle vehicle, double step) {
    double ret = vehiclePINVOKE.ChPathSteeringControllerStanley_Advance(swigCPtr, ChVehicle.getCPtr(vehicle), step);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset(ChVehicle vehicle) {
    vehiclePINVOKE.ChPathSteeringControllerStanley_Reset(swigCPtr, ChVehicle.getCPtr(vehicle));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void CalcTargetLocation() {
    vehiclePINVOKE.ChPathSteeringControllerStanley_CalcTargetLocation(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double CalcHeadingError(ChVectorD a, ChVectorD b) {
    double ret = vehiclePINVOKE.ChPathSteeringControllerStanley_CalcHeadingError(swigCPtr, ChVectorD.getCPtr(a), ChVectorD.getCPtr(b));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
