//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class vehicle {
  public static void SetDataPath(string path) {
    vehiclePINVOKE.SetDataPath(path);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetDataPath() {
    string ret = vehiclePINVOKE.GetDataPath();
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetDataFile(string filename) {
    string ret = vehiclePINVOKE.GetDataFile(filename);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_int new_intp() {
    global::System.IntPtr cPtr = vehiclePINVOKE.new_intp();
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_int copy_intp(int value) {
    global::System.IntPtr cPtr = vehiclePINVOKE.copy_intp(value);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_intp(SWIGTYPE_p_int obj) {
    vehiclePINVOKE.delete_intp(SWIGTYPE_p_int.getCPtr(obj));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void intp_assign(SWIGTYPE_p_int obj, int value) {
    vehiclePINVOKE.intp_assign(SWIGTYPE_p_int.getCPtr(obj), value);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int intp_value(SWIGTYPE_p_int obj) {
    int ret = vehiclePINVOKE.intp_value(SWIGTYPE_p_int.getCPtr(obj));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double new_doublep() {
    global::System.IntPtr cPtr = vehiclePINVOKE.new_doublep();
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_double copy_doublep(double value) {
    global::System.IntPtr cPtr = vehiclePINVOKE.copy_doublep(value);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_doublep(SWIGTYPE_p_double obj) {
    vehiclePINVOKE.delete_doublep(SWIGTYPE_p_double.getCPtr(obj));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void doublep_assign(SWIGTYPE_p_double obj, double value) {
    vehiclePINVOKE.doublep_assign(SWIGTYPE_p_double.getCPtr(obj), value);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static double doublep_value(SWIGTYPE_p_double obj) {
    double ret = vehiclePINVOKE.doublep_value(SWIGTYPE_p_double.getCPtr(obj));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBezierCurve StraightLinePath(ChVectorD start, ChVectorD end, uint num_intermediate) {
    global::System.IntPtr cPtr = vehiclePINVOKE.StraightLinePath__SWIG_0(ChVectorD.getCPtr(start), ChVectorD.getCPtr(end), num_intermediate);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBezierCurve StraightLinePath(ChVectorD start, ChVectorD end) {
    global::System.IntPtr cPtr = vehiclePINVOKE.StraightLinePath__SWIG_1(ChVectorD.getCPtr(start), ChVectorD.getCPtr(end));
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBezierCurve CirclePath(ChVectorD start, double radius, double run, bool left_turn, int num_turns) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CirclePath__SWIG_0(ChVectorD.getCPtr(start), radius, run, left_turn, num_turns);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBezierCurve CirclePath(ChVectorD start, double radius, double run, bool left_turn) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CirclePath__SWIG_1(ChVectorD.getCPtr(start), radius, run, left_turn);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBezierCurve CirclePath(ChVectorD start, double radius, double run) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CirclePath__SWIG_2(ChVectorD.getCPtr(start), radius, run);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBezierCurve DoubleLaneChangePath(ChVectorD start, double ramp, double width, double length, double run, bool left_turn) {
    global::System.IntPtr cPtr = vehiclePINVOKE.DoubleLaneChangePath__SWIG_0(ChVectorD.getCPtr(start), ramp, width, length, run, left_turn);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBezierCurve DoubleLaneChangePath(ChVectorD start, double ramp, double width, double length, double run) {
    global::System.IntPtr cPtr = vehiclePINVOKE.DoubleLaneChangePath__SWIG_1(ChVectorD.getCPtr(start), ramp, width, length, run);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ReadFileJSON(string filename, SWIGTYPE_p_rapidjson__Document d) {
    vehiclePINVOKE.ReadFileJSON(filename, SWIGTYPE_p_rapidjson__Document.getCPtr(d));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChVectorD ReadVectorJSON(SWIGTYPE_p_rapidjson__Value a) {
    ChVectorD ret = new ChVectorD(vehiclePINVOKE.ReadVectorJSON(SWIGTYPE_p_rapidjson__Value.getCPtr(a)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD ReadQuaternionJSON(SWIGTYPE_p_rapidjson__Value a) {
    ChQuaternionD ret = new ChQuaternionD(vehiclePINVOKE.ReadQuaternionJSON(SWIGTYPE_p_rapidjson__Value.getCPtr(a)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChColor ReadColorJSON(SWIGTYPE_p_rapidjson__Value a) {
    ChColor ret = new ChColor(vehiclePINVOKE.ReadColorJSON(SWIGTYPE_p_rapidjson__Value.getCPtr(a)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static MaterialInfo ReadMaterialInfoJSON(SWIGTYPE_p_rapidjson__Value mat) {
    MaterialInfo ret = new MaterialInfo(vehiclePINVOKE.ReadMaterialInfoJSON(SWIGTYPE_p_rapidjson__Value.getCPtr(mat)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__shared_ptrT_ChVehicleBushingData_t ReadBushingDataJSON(SWIGTYPE_p_rapidjson__Value bd) {
    SWIGTYPE_p_std__shared_ptrT_ChVehicleBushingData_t ret = new SWIGTYPE_p_std__shared_ptrT_ChVehicleBushingData_t(vehiclePINVOKE.ReadBushingDataJSON(SWIGTYPE_p_rapidjson__Value.getCPtr(bd)), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChChassis ReadChassisJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadChassisJSON(filename);
    ChChassis ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassis(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChChassisRear ReadChassisRearJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadChassisRearJSON(filename);
    ChChassisRear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisRear(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChChassisConnector ReadChassisConnectorJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadChassisConnectorJSON(filename);
    ChChassisConnector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisConnector(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPowertrain ReadPowertrainJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadPowertrainJSON(filename);
    ChPowertrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPowertrain(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSuspension ReadSuspensionJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadSuspensionJSON(filename);
    ChSuspension ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSuspension(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSteering ReadSteeringJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadSteeringJSON(filename);
    ChSteering ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSteering(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChDrivelineWV ReadDrivelineWVJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadDrivelineWVJSON(filename);
    ChDrivelineWV ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDrivelineWV(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__shared_ptrT_ChAntirollBar_t ReadAntirollbarJSON(string filename) {
    SWIGTYPE_p_std__shared_ptrT_ChAntirollBar_t ret = new SWIGTYPE_p_std__shared_ptrT_ChAntirollBar_t(vehiclePINVOKE.ReadAntirollbarJSON(filename), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChWheel ReadWheelJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadWheelJSON(filename);
    ChWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChWheel(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSubchassis ReadSubchassisJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadSubchassisJSON(filename);
    ChSubchassis ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSubchassis(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBrake ReadBrakeJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadBrakeJSON(filename);
    ChBrake ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBrake(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTire ReadTireJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadTireJSON(filename);
    ChTire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTrackAssembly ReadTrackAssemblyJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadTrackAssemblyJSON(filename);
    ChTrackAssembly ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackAssembly(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChDrivelineTV ReadDrivelineTVJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadDrivelineTVJSON(filename);
    ChDrivelineTV ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDrivelineTV(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTrackBrake ReadTrackBrakeJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadTrackBrakeJSON(filename);
    ChTrackBrake ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackBrake(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChIdler ReadIdlerJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadIdlerJSON(filename);
    ChIdler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIdler(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRoadWheelAssembly ReadRoadWheelAssemblyJSON(string filename, bool has_shock) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadRoadWheelAssemblyJSON(filename, has_shock);
    ChRoadWheelAssembly ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRoadWheelAssembly(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__shared_ptrT_ChRoller_t ReadRollerJSON(string filename) {
    SWIGTYPE_p_std__shared_ptrT_ChRoller_t ret = new SWIGTYPE_p_std__shared_ptrT_ChRoller_t(vehiclePINVOKE.ReadRollerJSON(filename), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRoadWheel ReadRoadWheelJSON(string filename) {
    global::System.IntPtr cPtr = vehiclePINVOKE.ReadRoadWheelJSON(filename);
    ChRoadWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRoadWheel(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChDoubleWishbone CastToChDoubleWishbone(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChDoubleWishbone(ChSuspension.getCPtr(in_obj));
    ChDoubleWishbone ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDoubleWishbone(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMacPhersonStrut CastToChMacPhersonStrut(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChMacPhersonStrut(ChSuspension.getCPtr(in_obj));
    ChMacPhersonStrut ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMacPhersonStrut(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLeafspringAxle CastToChLeafspringAxle(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChLeafspringAxle(ChSuspension.getCPtr(in_obj));
    ChLeafspringAxle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLeafspringAxle(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChHendricksonPRIMAXX CastToChHendricksonPRIMAXX(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChHendricksonPRIMAXX(ChSuspension.getCPtr(in_obj));
    ChHendricksonPRIMAXX ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChHendricksonPRIMAXX(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChDoubleWishboneReduced CastToChDoubleWishboneReduced(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChDoubleWishboneReduced(ChSuspension.getCPtr(in_obj));
    ChDoubleWishboneReduced ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDoubleWishboneReduced(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMultiLink CastToChMultiLink(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChMultiLink(ChSuspension.getCPtr(in_obj));
    ChMultiLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMultiLink(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRigidPinnedAxle CastToChRigidPinnedAxle(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChRigidPinnedAxle(ChSuspension.getCPtr(in_obj));
    ChRigidPinnedAxle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRigidPinnedAxle(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSemiTrailingArm CastToChSemiTrailingArm(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChSemiTrailingArm(ChSuspension.getCPtr(in_obj));
    ChSemiTrailingArm ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSemiTrailingArm(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRigidSuspension CastToChRigidSuspension(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChRigidSuspension(ChSuspension.getCPtr(in_obj));
    ChRigidSuspension ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRigidSuspension(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolidAxle CastToChSolidAxle(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChSolidAxle(ChSuspension.getCPtr(in_obj));
    ChSolidAxle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolidAxle(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChThreeLinkIRS CastToChThreeLinkIRS(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChThreeLinkIRS(ChSuspension.getCPtr(in_obj));
    ChThreeLinkIRS ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChThreeLinkIRS(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChToeBarLeafspringAxle CastToChToeBarLeafspringAxle(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChToeBarLeafspringAxle(ChSuspension.getCPtr(in_obj));
    ChToeBarLeafspringAxle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChToeBarLeafspringAxle(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolidBellcrankThreeLinkAxle CastToChSolidBellcrankThreeLinkAxle(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChSolidBellcrankThreeLinkAxle(ChSuspension.getCPtr(in_obj));
    ChSolidBellcrankThreeLinkAxle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolidBellcrankThreeLinkAxle(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolidThreeLinkAxle CastToChSolidThreeLinkAxle(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChSolidThreeLinkAxle(ChSuspension.getCPtr(in_obj));
    ChSolidThreeLinkAxle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolidThreeLinkAxle(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSingleWishbone CastToChSingleWishbone(ChSuspension in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChSingleWishbone(ChSuspension.getCPtr(in_obj));
    ChSingleWishbone ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSingleWishbone(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPitmanArm CastToChPitmanArm(ChSteering in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChPitmanArm(ChSteering.getCPtr(in_obj));
    ChPitmanArm ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPitmanArm(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPitmanArmShafts CastToChPitmanArmShafts(ChSteering in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChPitmanArmShafts(ChSteering.getCPtr(in_obj));
    ChPitmanArmShafts ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPitmanArmShafts(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRackPinion CastToChRackPinion(ChSteering in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChRackPinion(ChSteering.getCPtr(in_obj));
    ChRackPinion ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRackPinion(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRotaryArm CastToChRotaryArm(ChSteering in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChRotaryArm(ChSteering.getCPtr(in_obj));
    ChRotaryArm ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRotaryArm(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRigidChassis CastToChRigidChassis(ChChassis in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChRigidChassis(ChChassis.getCPtr(in_obj));
    ChRigidChassis ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRigidChassis(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRigidChassisRear CastToChRigidChassisRear(ChChassisRear in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChRigidChassisRear(ChChassisRear.getCPtr(in_obj));
    ChRigidChassisRear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRigidChassisRear(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChChassisConnectorArticulated CastToChChassisConnectorArticulated(ChChassisConnector in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChChassisConnectorArticulated(ChChassisConnector.getCPtr(in_obj));
    ChChassisConnectorArticulated ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisConnectorArticulated(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChChassisConnectorHitch CastToChChassisConnectorHitch(ChChassisConnector in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChChassisConnectorHitch(ChChassisConnector.getCPtr(in_obj));
    ChChassisConnectorHitch ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisConnectorHitch(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChChassisConnectorTorsion CastToChChassisConnectorTorsion(ChChassisConnector in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChChassisConnectorTorsion(ChChassisConnector.getCPtr(in_obj));
    ChChassisConnectorTorsion ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisConnectorTorsion(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBalancer CastToChBalancer(ChSubchassis in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChBalancer(ChSubchassis.getCPtr(in_obj));
    ChBalancer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBalancer(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTMeasyTire CastToChTMeasyTire(ChTire in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChTMeasyTire(ChTire.getCPtr(in_obj));
    ChTMeasyTire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTMeasyTire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChRigidTire CastToChRigidTire(ChTire in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChRigidTire(ChTire.getCPtr(in_obj));
    ChRigidTire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChRigidTire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_chrono__vehicle__ChReissnerTire CastToChReissnerTire(ChTire in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChReissnerTire(ChTire.getCPtr(in_obj));
    SWIGTYPE_p_chrono__vehicle__ChReissnerTire ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_chrono__vehicle__ChReissnerTire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPac89Tire CastToChPac89Tire(ChTire in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChPac89Tire(ChTire.getCPtr(in_obj));
    ChPac89Tire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPac89Tire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPac02Tire CastToChPac02Tire(ChTire in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChPac02Tire(ChTire.getCPtr(in_obj));
    ChPac02Tire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPac02Tire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLugreTire CastToChLugreTire(ChTire in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChLugreTire(ChTire.getCPtr(in_obj));
    ChLugreTire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLugreTire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFialaTire CastToChFialaTire(ChTire in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChFialaTire(ChTire.getCPtr(in_obj));
    ChFialaTire ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFialaTire(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SimplePowertrain CastToSimplePowertrain(ChPowertrain in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToSimplePowertrain(ChPowertrain.getCPtr(in_obj));
    SimplePowertrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new SimplePowertrain(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SimpleMapPowertrain CastToSimpleMapPowertrain(ChPowertrain in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToSimpleMapPowertrain(ChPowertrain.getCPtr(in_obj));
    SimpleMapPowertrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new SimpleMapPowertrain(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SimpleCVTPowertrain CastToSimpleCVTPowertrain(ChPowertrain in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToSimpleCVTPowertrain(ChPowertrain.getCPtr(in_obj));
    SimpleCVTPowertrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new SimpleCVTPowertrain(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ShaftsPowertrain CastToShaftsPowertrain(ChPowertrain in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToShaftsPowertrain(ChPowertrain.getCPtr(in_obj));
    ShaftsPowertrain ret = (cPtr == global::System.IntPtr.Zero) ? null : new ShaftsPowertrain(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChDrivelineWV CastToChDrivelineWV(ChDriveline in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChDrivelineWV(ChDriveline.getCPtr(in_obj));
    ChDrivelineWV ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDrivelineWV(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsDriveline2WD CastToChShaftsDriveline2WD(ChDriveline in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChShaftsDriveline2WD(ChDriveline.getCPtr(in_obj));
    ChShaftsDriveline2WD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsDriveline2WD(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsDriveline4WD CastToChShaftsDriveline4WD(ChDriveline in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChShaftsDriveline4WD(ChDriveline.getCPtr(in_obj));
    ChShaftsDriveline4WD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsDriveline4WD(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSimpleDriveline CastToChSimpleDriveline(ChDriveline in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChSimpleDriveline(ChDriveline.getCPtr(in_obj));
    ChSimpleDriveline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSimpleDriveline(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSimpleDrivelineXWD CastToChSimpleDrivelineXWD(ChDriveline in_obj) {
    global::System.IntPtr cPtr = vehiclePINVOKE.CastToChSimpleDrivelineXWD(ChDriveline.getCPtr(in_obj));
    ChSimpleDrivelineXWD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSimpleDrivelineXWD(cPtr, true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
