//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChronoEngine_csharp {
  public static void SetFirstIntID(int val) {
    ChronoEngine_csharpPINVOKE.SetFirstIntID(val);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int GetUniqueIntID() {
    int ret = ChronoEngine_csharpPINVOKE.GetUniqueIntID();
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetChronoDataPath(string path) {
    ChronoEngine_csharpPINVOKE.SetChronoDataPath(path);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetChronoDataPath() {
    string ret = ChronoEngine_csharpPINVOKE.GetChronoDataPath();
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetChronoDataFile(string filename) {
    string ret = ChronoEngine_csharpPINVOKE.GetChronoDataFile(filename);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetChronoOutputPath(string path) {
    ChronoEngine_csharpPINVOKE.SetChronoOutputPath(path);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetChronoOutputPath() {
    string ret = ChronoEngine_csharpPINVOKE.GetChronoOutputPath();
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool should_raise_an_assert {
    get {
      bool ret = ChronoEngine_csharpPINVOKE.should_raise_an_assert_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool no_more_assert {
    set {
      ChronoEngine_csharpPINVOKE.no_more_assert_set(value);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = ChronoEngine_csharpPINVOKE.no_more_assert_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void StreamOUTdenseMatlabFormat(SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t A, SWIGTYPE_p_ChStreamOutAscii stream) {
    ChronoEngine_csharpPINVOKE.StreamOUTdenseMatlabFormat(SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(A), SWIGTYPE_p_ChStreamOutAscii.getCPtr(stream));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PasteMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matrTo, SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t matrFrom, int insrow, int inscol, bool overwrite) {
    ChronoEngine_csharpPINVOKE.PasteMatrix__SWIG_0(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matrTo), SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(matrFrom), insrow, inscol, overwrite);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PasteMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matrTo, SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t matrFrom, int insrow, int inscol) {
    ChronoEngine_csharpPINVOKE.PasteMatrix__SWIG_1(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matrTo), SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(matrFrom), insrow, inscol);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void StreamOUTsparseMatlabFormat(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matr, SWIGTYPE_p_ChStreamOutAscii mstream) {
    ChronoEngine_csharpPINVOKE.StreamOUTsparseMatlabFormat(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matr), SWIGTYPE_p_ChStreamOutAscii.getCPtr(mstream));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void StreamOUT(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matr, SWIGTYPE_p_ChStreamOutAscii stream) {
    ChronoEngine_csharpPINVOKE.StreamOUT(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matr), SWIGTYPE_p_ChStreamOutAscii.getCPtr(stream));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChVectorD VNULL {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.VNULL_get();
      ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVectorD VECT_X {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.VECT_X_get();
      ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVectorD VECT_Y {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.VECT_Y_get();
      ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVectorD VECT_Z {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.VECT_Z_get();
      ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD QNULL {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.QNULL_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD QUNIT {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.QUNIT_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_Y_TO_X {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_ROTATE_Y_TO_X_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_Y_TO_Z {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_ROTATE_Y_TO_Z_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_X_TO_Y {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_ROTATE_X_TO_Y_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_X_TO_Z {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_ROTATE_X_TO_Z_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_Z_TO_Y {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_ROTATE_Z_TO_Y_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_ROTATE_Z_TO_X {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_ROTATE_Z_TO_X_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_FLIP_AROUND_X {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_FLIP_AROUND_X_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_FLIP_AROUND_Y {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_FLIP_AROUND_Y_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaternionD Q_FLIP_AROUND_Z {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.Q_FLIP_AROUND_Z_get();
      ChQuaternionD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaternionD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double Qlength(ChQuaternionD q) {
    double ret = ChronoEngine_csharpPINVOKE.Qlength(ChQuaternionD.getCPtr(q));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qadd(ChQuaternionD qa, ChQuaternionD qb) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qadd(ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qsub(ChQuaternionD qa, ChQuaternionD qb) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qsub(ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qscale(ChQuaternionD q, double fact) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qscale(ChQuaternionD.getCPtr(q), fact), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qnorm(ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qnorm(ChQuaternionD.getCPtr(q)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_AngAxis(double angle, ChVectorD axis) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Q_from_AngAxis(angle, ChVectorD.getCPtr(axis)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_Vect_to_Vect(ChVectorD fr_vect, ChVectorD to_vect) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Q_from_Vect_to_Vect(ChVectorD.getCPtr(fr_vect), ChVectorD.getCPtr(to_vect)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_NasaAngles(ChVectorD RxRyRz) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Q_from_NasaAngles(ChVectorD.getCPtr(RxRyRz)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD Q_to_NasaAngles(ChQuaternionD mq) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.Q_to_NasaAngles(ChQuaternionD.getCPtr(mq)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_Euler123(ChVectorD RxRyRz) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Q_from_Euler123(ChVectorD.getCPtr(RxRyRz)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD Q_to_Euler123(ChQuaternionD mq) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.Q_to_Euler123(ChQuaternionD.getCPtr(mq)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_AngZ(double angleZ) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Q_from_AngZ(angleZ), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_AngX(double angleX) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Q_from_AngX(angleX), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Q_from_AngY(double angleY) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Q_from_AngY(angleY), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Q_to_AngAxis(ChQuaternionD quat, SWIGTYPE_p_double angle, ChVectorD axis) {
    ChronoEngine_csharpPINVOKE.Q_to_AngAxis(ChQuaternionD.getCPtr(quat), SWIGTYPE_p_double.getCPtr(angle), ChVectorD.getCPtr(axis));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChQuaternionD Qdt_from_Wrel(ChVectorD w, ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qdt_from_Wrel(ChVectorD.getCPtr(w), ChQuaternionD.getCPtr(q)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdt_from_Wabs(ChVectorD w, ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qdt_from_Wabs(ChVectorD.getCPtr(w), ChQuaternionD.getCPtr(q)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdt_from_AngAxis(ChQuaternionD quat, double angle_dt, ChVectorD axis) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qdt_from_AngAxis(ChQuaternionD.getCPtr(quat), angle_dt, ChVectorD.getCPtr(axis)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdtdt_from_Aabs(ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qdtdt_from_Aabs(ChVectorD.getCPtr(a), ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdtdt_from_Arel(ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qdtdt_from_Arel(ChVectorD.getCPtr(a), ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qdtdt_from_AngAxis(double angle_dtdt, ChVectorD axis, ChQuaternionD q, ChQuaternionD q_dt) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qdtdt_from_AngAxis(angle_dtdt, ChVectorD.getCPtr(axis), ChQuaternionD.getCPtr(q), ChQuaternionD.getCPtr(q_dt)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qconjugate(ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qconjugate(ChQuaternionD.getCPtr(q)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Qcross(ChQuaternionD qa, ChQuaternionD qb) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Qcross(ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Qequal(ChQuaternionD qa, ChQuaternionD qb) {
    bool ret = ChronoEngine_csharpPINVOKE.Qequal(ChQuaternionD.getCPtr(qa), ChQuaternionD.getCPtr(qb));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Qnotnull(ChQuaternionD qa) {
    bool ret = ChronoEngine_csharpPINVOKE.Qnotnull(ChQuaternionD.getCPtr(qa));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD ImmQ_complete(ChVectorD qimm) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.ImmQ_complete(ChVectorD.getCPtr(qimm)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD ImmQ_dt_complete(ChQuaternionD mq, ChVectorD qimm_dt) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.ImmQ_dt_complete(ChQuaternionD.getCPtr(mq), ChVectorD.getCPtr(qimm_dt)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD ImmQ_dtdt_complete(ChQuaternionD mq, ChQuaternionD mqdt, ChVectorD qimm_dtdt) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.ImmQ_dtdt_complete(ChQuaternionD.getCPtr(mq), ChQuaternionD.getCPtr(mqdt), ChVectorD.getCPtr(qimm_dtdt)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD VaxisXfromQuat(ChQuaternionD quat) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.VaxisXfromQuat(ChQuaternionD.getCPtr(quat)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD Quat_to_Angle(AngleSet angset, ChQuaternionD mquat) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.Quat_to_Angle((int)angset, ChQuaternionD.getCPtr(mquat)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVectorD Angle_to_Angle(AngleSet setfrom, AngleSet setto, ChVectorD mangles) {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.Angle_to_Angle((int)setfrom, (int)setto, ChVectorD.getCPtr(mangles)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD Angle_to_Quat(AngleSet angset, ChVectorD mangles) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.Angle_to_Quat((int)angset, ChVectorD.getCPtr(mangles)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD AngleDT_to_QuatDT(AngleSet angset, ChVectorD mangles, ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.AngleDT_to_QuatDT((int)angset, ChVectorD.getCPtr(mangles), ChQuaternionD.getCPtr(q)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaternionD AngleDTDT_to_QuatDTDT(AngleSet angset, ChVectorD mangles, ChQuaternionD q) {
    ChQuaternionD ret = new ChQuaternionD(ChronoEngine_csharpPINVOKE.AngleDTDT_to_QuatDTDT((int)angset, ChVectorD.getCPtr(mangles), ChQuaternionD.getCPtr(q)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCoordsysD Force2Dcsys(ChCoordsysD cs) {
    ChCoordsysD ret = new ChCoordsysD(ChronoEngine_csharpPINVOKE.Force2Dcsys(ChCoordsysD.getCPtr(cs)), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCoordsysD CSYSNULL {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CSYSNULL_get();
      ChCoordsysD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCoordsysD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChCoordsysD CSYSNORM {
    get {
      global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CSYSNORM_get();
      ChCoordsysD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCoordsysD(cPtr, false);
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChLog GetLog() {
    ChLog ret = new ChLog(ChronoEngine_csharpPINVOKE.GetLog(), false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetLog(ChLog new_logobject) {
    ChronoEngine_csharpPINVOKE.SetLog(ChLog.getCPtr(new_logobject));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetLogDefault() {
    ChronoEngine_csharpPINVOKE.SetLogDefault();
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double CH_C_PI {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_PI_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_PI_2 {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_PI_2_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_PI_4 {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_PI_4_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_1_PI {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_1_PI_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_2PI {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_2PI_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_RAD_TO_DEG {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_RAD_TO_DEG_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_DEG_TO_RAD {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_DEG_TO_RAD_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_SQRT_2 {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_SQRT_2_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_SQRT_1_2 {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_SQRT_1_2_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_E {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_E_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_LOG2E {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_LOG2E_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_LOG10E {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_LOG10E_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_LN2 {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_LN2_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_C_LN10 {
    get {
      double ret = ChronoEngine_csharpPINVOKE.CH_C_LN10_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double BDF_STEP_HIGH {
    get {
      double ret = ChronoEngine_csharpPINVOKE.BDF_STEP_HIGH_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double BDF_STEP_LOW {
    get {
      double ret = ChronoEngine_csharpPINVOKE.BDF_STEP_LOW_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double ChAtan2(double mcos, double msin) {
    double ret = ChronoEngine_csharpPINVOKE.ChAtan2(mcos, msin);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ChRandom() {
    double ret = ChronoEngine_csharpPINVOKE.ChRandom();
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ChSetRandomSeed(int newseed) {
    ChronoEngine_csharpPINVOKE.ChSetRandomSeed(newseed);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double ChNoise(double x, double amp, double freq, int octaves, double amp_ratio) {
    double ret = ChronoEngine_csharpPINVOKE.ChNoise(x, amp, freq, octaves, amp_ratio);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ChMax(int a, int b) {
    int ret = ChronoEngine_csharpPINVOKE.ChMax__SWIG_0(a, b);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ChMax(double a, double b) {
    double ret = ChronoEngine_csharpPINVOKE.ChMax__SWIG_1(a, b);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ChMin(int a, int b) {
    int ret = ChronoEngine_csharpPINVOKE.ChMin__SWIG_0(a, b);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ChMin(double a, double b) {
    double ret = ChronoEngine_csharpPINVOKE.ChMin__SWIG_1(a, b);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ChSineStep(double x, double x1, double y1, double x2, double y2) {
    double ret = ChronoEngine_csharpPINVOKE.ChSineStep(x, x1, y1, x2, y2);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ChPeriodicPar(SWIGTYPE_p_double u, int closed) {
    ChronoEngine_csharpPINVOKE.ChPeriodicPar(SWIGTYPE_p_double.getCPtr(u), closed);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChMaterialSurfaceNSC CastToChMaterialSurfaceNSC(ChMaterialSurface in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChMaterialSurfaceNSC(ChMaterialSurface.getCPtr(in_obj));
    ChMaterialSurfaceNSC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialSurfaceNSC(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMaterialSurfaceSMC CastToChMaterialSurfaceSMC(ChMaterialSurface in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChMaterialSurfaceSMC(ChMaterialSurface.getCPtr(in_obj));
    ChMaterialSurfaceSMC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialSurfaceSMC(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMaterialCompositeSMC CastToChMaterialCompositeSMC(ChMaterialComposite in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChMaterialCompositeSMC(ChMaterialComposite.getCPtr(in_obj));
    ChMaterialCompositeSMC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialCompositeSMC(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMaterialCompositeNSC CastToChMaterialCompositeNSC(ChMaterialComposite in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChMaterialCompositeNSC(ChMaterialComposite.getCPtr(in_obj));
    ChMaterialCompositeNSC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMaterialCompositeNSC(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LineLineIntersect(ChVectorD p1, ChVectorD p2, ChVectorD p3, ChVectorD p4, ChVectorD pa, ChVectorD pb, SWIGTYPE_p_double mua, SWIGTYPE_p_double mub) {
    bool ret = ChronoEngine_csharpPINVOKE.LineLineIntersect(ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2), ChVectorD.getCPtr(p3), ChVectorD.getCPtr(p4), ChVectorD.getCPtr(pa), ChVectorD.getCPtr(pb), SWIGTYPE_p_double.getCPtr(mua), SWIGTYPE_p_double.getCPtr(mub));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double PointLineDistance(ChVectorD p, ChVectorD dA, ChVectorD dB, SWIGTYPE_p_double mu, SWIGTYPE_p_bool is_insegment) {
    double ret = ChronoEngine_csharpPINVOKE.PointLineDistance(ChVectorD.getCPtr(p), ChVectorD.getCPtr(dA), ChVectorD.getCPtr(dB), SWIGTYPE_p_double.getCPtr(mu), SWIGTYPE_p_bool.getCPtr(is_insegment));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double PointTriangleDistance(ChVectorD B, ChVectorD A1, ChVectorD A2, ChVectorD A3, SWIGTYPE_p_double mu, SWIGTYPE_p_double mv, SWIGTYPE_p_bool is_into, ChVectorD Bprojected) {
    double ret = ChronoEngine_csharpPINVOKE.PointTriangleDistance(ChVectorD.getCPtr(B), ChVectorD.getCPtr(A1), ChVectorD.getCPtr(A2), ChVectorD.getCPtr(A3), SWIGTYPE_p_double.getCPtr(mu), SWIGTYPE_p_double.getCPtr(mv), SWIGTYPE_p_bool.getCPtr(is_into), ChVectorD.getCPtr(Bprojected));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DegenerateTriangle(ChVectorD Dx, ChVectorD Dy) {
    bool ret = ChronoEngine_csharpPINVOKE.DegenerateTriangle__SWIG_0(ChVectorD.getCPtr(Dx), ChVectorD.getCPtr(Dy));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DegenerateTriangle(ChVectorD v1, ChVectorD v2, ChVectorD v3) {
    bool ret = ChronoEngine_csharpPINVOKE.DegenerateTriangle__SWIG_1(ChVectorD.getCPtr(v1), ChVectorD.getCPtr(v2), ChVectorD.getCPtr(v3));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int BODY_DOF {
    get {
      int ret = ChronoEngine_csharpPINVOKE.BODY_DOF_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int BODY_QDOF {
    get {
      int ret = ChronoEngine_csharpPINVOKE.BODY_QDOF_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int BODY_ROT {
    get {
      int ret = ChronoEngine_csharpPINVOKE.BODY_ROT_get();
      if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChBody CastContactableToChBody(ChContactable base_) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastContactableToChBody(ChContactable.getCPtr(base_));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only, bool dump_vel, string delim) {
    ChronoEngine_csharpPINVOKE.WriteBodies__SWIG_0(ChSystem.getCPtr(system), filename, active_only, dump_vel, delim);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only, bool dump_vel) {
    ChronoEngine_csharpPINVOKE.WriteBodies__SWIG_1(ChSystem.getCPtr(system), filename, active_only, dump_vel);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only) {
    ChronoEngine_csharpPINVOKE.WriteBodies__SWIG_2(ChSystem.getCPtr(system), filename, active_only);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename) {
    ChronoEngine_csharpPINVOKE.WriteBodies__SWIG_3(ChSystem.getCPtr(system), filename);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool WriteCheckpoint(ChSystem system, string filename) {
    bool ret = ChronoEngine_csharpPINVOKE.WriteCheckpoint(ChSystem.getCPtr(system), filename);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ReadCheckpoint(ChSystem system, string filename) {
    ChronoEngine_csharpPINVOKE.ReadCheckpoint(ChSystem.getCPtr(system), filename);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCamera(string filename, ChVectorD cam_location, ChVectorD cam_target, ChVectorD camera_upvec, string delim) {
    ChronoEngine_csharpPINVOKE.WriteCamera__SWIG_0(filename, ChVectorD.getCPtr(cam_location), ChVectorD.getCPtr(cam_target), ChVectorD.getCPtr(camera_upvec), delim);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCamera(string filename, ChVectorD cam_location, ChVectorD cam_target, ChVectorD camera_upvec) {
    ChronoEngine_csharpPINVOKE.WriteCamera__SWIG_1(filename, ChVectorD.getCPtr(cam_location), ChVectorD.getCPtr(cam_target), ChVectorD.getCPtr(camera_upvec));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, bool body_info, string delim) {
    ChronoEngine_csharpPINVOKE.WriteVisualizationAssets__SWIG_0(ChSystem.getCPtr(system), filename, body_info, delim);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, bool body_info) {
    ChronoEngine_csharpPINVOKE.WriteVisualizationAssets__SWIG_1(ChSystem.getCPtr(system), filename, body_info);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename) {
    ChronoEngine_csharpPINVOKE.WriteVisualizationAssets__SWIG_2(ChSystem.getCPtr(system), filename);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector, bool body_info, string delim) {
    ChronoEngine_csharpPINVOKE.WriteVisualizationAssets__SWIG_3(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector), body_info, delim);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector, bool body_info) {
    ChronoEngine_csharpPINVOKE.WriteVisualizationAssets__SWIG_4(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector), body_info);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector) {
    ChronoEngine_csharpPINVOKE.WriteVisualizationAssets__SWIG_5(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVectorD pos, ChQuaternionD rot, bool smoothed) {
    ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_0(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), smoothed);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_1(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_2(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color) {
    ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_3(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir) {
    ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_4(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color, ChVectorD pos, ChQuaternionD rot) {
    bool ret = ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_5(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_6(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color), ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color) {
    bool ret = ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_7(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir) {
    bool ret = ChronoEngine_csharpPINVOKE.WriteMeshPovray__SWIG_8(obj_filename, mesh_name, out_dir);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir, double radius, ChColor col) {
    ChronoEngine_csharpPINVOKE.WriteCurvePovray__SWIG_0(ChBezierCurve.getCPtr(curve), curve_name, out_dir, radius, ChColor.getCPtr(col));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir, double radius) {
    ChronoEngine_csharpPINVOKE.WriteCurvePovray__SWIG_1(ChBezierCurve.getCPtr(curve), curve_name, out_dir, radius);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir) {
    ChronoEngine_csharpPINVOKE.WriteCurvePovray__SWIG_2(ChBezierCurve.getCPtr(curve), curve_name, out_dir);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddSphereGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddSphereGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddSphereGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChMaterialSurface material, double radius) {
    ChronoEngine_csharpPINVOKE.AddSphereGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddEllipsoidGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddEllipsoidGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddEllipsoidGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChMaterialSurface material, ChVectorD size) {
    ChronoEngine_csharpPINVOKE.AddEllipsoidGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddBoxGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddBoxGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddBoxGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size) {
    ChronoEngine_csharpPINVOKE.AddBoxGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddBiSphereGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddBiSphereGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddBiSphereGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChMaterialSurface material, double radius, double cDist) {
    ChronoEngine_csharpPINVOKE.AddBiSphereGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, cDist);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddCapsuleGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddCapsuleGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddCapsuleGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen) {
    ChronoEngine_csharpPINVOKE.AddCapsuleGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddCylinderGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddCylinderGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddCylinderGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen) {
    ChronoEngine_csharpPINVOKE.AddCylinderGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddConeGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddConeGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddConeGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChMaterialSurface material, double radius, double height) {
    ChronoEngine_csharpPINVOKE.AddConeGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, height);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChMaterialSurface material, string obj_filename, string name) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, float skin_thickness, bool use_original_asset) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), skin_thickness, use_original_asset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, float skin_thickness) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), skin_thickness);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChMaterialSurface material, string obj_filename, string name) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, bool use_original_asset) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), use_original_asset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChMaterialSurface material, string obj_filename, string name) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), obj_filename, name);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionSplit(ChSystem system, ChMaterialSurface material, string obj_filename, string name, ChVectorD pos, ChQuaternionD rot, double total_mass) {
    bool ret = ChronoEngine_csharpPINVOKE.AddTriangleMeshConvexDecompositionSplit(ChSystem.getCPtr(system), ChMaterialSurface.getCPtr(material), obj_filename, name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), total_mass);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddTriangleGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddTriangleGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddTriangleGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChMaterialSurface material, ChVectorD vertA, ChVectorD vertB, ChVectorD vertC, string name) {
    ChronoEngine_csharpPINVOKE.AddTriangleGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(vertA), ChVectorD.getCPtr(vertB), ChVectorD.getCPtr(vertC), name);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddRoundedBoxGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddRoundedBoxGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddRoundedBoxGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChMaterialSurface material, ChVectorD size, double srad) {
    ChronoEngine_csharpPINVOKE.AddRoundedBoxGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChVectorD.getCPtr(size), srad);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, double srad, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddRoundedCylinderGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, double srad, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddRoundedCylinderGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, srad, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, double srad, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddRoundedCylinderGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, srad, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChMaterialSurface material, double radius, double hlen, double srad) {
    ChronoEngine_csharpPINVOKE.AddRoundedCylinderGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, hlen, srad);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle, ChVectorD pos, ChQuaternionD rot, bool visualization) {
    ChronoEngine_csharpPINVOKE.AddTorusGeometry__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), visualization);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddTorusGeometry__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddTorusGeometry__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments, int angle) {
    ChronoEngine_csharpPINVOKE.AddTorusGeometry__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments, angle);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness, int segments) {
    ChronoEngine_csharpPINVOKE.AddTorusGeometry__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness, segments);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChMaterialSurface material, double radius, double thickness) {
    ChronoEngine_csharpPINVOKE.AddTorusGeometry__SWIG_5(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), radius, thickness);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, ChVectorD pos, ChQuaternionD rot, bool collide, bool y_up, bool overlap, bool closed) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateBoxContainer__SWIG_0(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, y_up, overlap, closed);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, ChVectorD pos, ChQuaternionD rot, bool collide, bool y_up, bool overlap) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateBoxContainer__SWIG_1(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, y_up, overlap);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, ChVectorD pos, ChQuaternionD rot, bool collide, bool y_up) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateBoxContainer__SWIG_2(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, y_up);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, ChVectorD pos, ChQuaternionD rot, bool collide) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateBoxContainer__SWIG_3(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, ChVectorD pos, ChQuaternionD rot) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateBoxContainer__SWIG_4(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, ChVectorD pos) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateBoxContainer__SWIG_5(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, ChVectorD.getCPtr(pos));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateBoxContainer__SWIG_6(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap, bool closed, bool isBoxBase, bool partialVisualization) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_0(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap, closed, isBoxBase, partialVisualization);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap, bool closed, bool isBoxBase) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_1(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap, closed, isBoxBase);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap, bool closed) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_2(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap, closed);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide, bool overlap) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_3(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide, overlap);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, int numBoxes, ChVectorD pos, ChQuaternionD rot, bool collide) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_4(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), collide);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, int numBoxes, ChVectorD pos, ChQuaternionD rot) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_5(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, numBoxes, ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, int numBoxes, ChVectorD pos) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_6(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, numBoxes, ChVectorD.getCPtr(pos));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, int id, ChMaterialSurface mat, ChVectorD hdim, double hthick, int numBoxes) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_7(ChSystem.getCPtr(system), id, ChMaterialSurface.getCPtr(mat), ChVectorD.getCPtr(hdim), hthick, numBoxes);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity, float hacd_smallclusterthreshold, float hacd_fusetolerance) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_0(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity, hacd_smallclusterthreshold, hacd_fusetolerance);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity, float hacd_smallclusterthreshold) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_1(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity, hacd_smallclusterthreshold);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_2(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_3(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount, int hacd_maxhullmerge) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_4(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, int hacd_maxhullcount) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_5(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), hacd_maxhullcount);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_6(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_7(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexMesh__SWIG_8(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexHulls(string file_name, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls) {
    bool ret = ChronoEngine_csharpPINVOKE.LoadConvexHulls(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot, bool use_original_asset) {
    ChronoEngine_csharpPINVOKE.AddConvexCollisionModel__SWIG_0(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot), use_original_asset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddConvexCollisionModel__SWIG_1(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddConvexCollisionModel__SWIG_2(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2 convex_shape) {
    ChronoEngine_csharpPINVOKE.AddConvexCollisionModel__SWIG_3(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_chrono__collision__ChConvexDecompositionHACDv2.getCPtr(convex_shape));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls, ChVectorD pos, ChQuaternionD rot) {
    ChronoEngine_csharpPINVOKE.AddConvexCollisionModel__SWIG_4(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls), ChVectorD.getCPtr(pos), ChQuaternionD.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls, ChVectorD pos) {
    ChronoEngine_csharpPINVOKE.AddConvexCollisionModel__SWIG_5(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls), ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChMaterialSurface material, ChTriangleMeshConnected convex_mesh, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t convex_hulls) {
    ChronoEngine_csharpPINVOKE.AddConvexCollisionModel__SWIG_6(ChBody.getCPtr(body), ChMaterialSurface.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVectorT_double_t_t_t.getCPtr(convex_hulls));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChBody CastToChBody(ChContactable in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChBody__SWIG_0(ChContactable.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualization CastToChVisualization(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChVisualization(ChAsset.getCPtr(in_obj));
    ChVisualization ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualization(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChObjShapeFile CastToChObjShapeFile(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChObjShapeFile(ChAsset.getCPtr(in_obj));
    ChObjShapeFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChObjShapeFile(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBoxShape CastToChBoxShape(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChBoxShape(ChAsset.getCPtr(in_obj));
    ChBoxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBoxShape(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSphereShape CastToChSphereShape(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChSphereShape(ChAsset.getCPtr(in_obj));
    ChSphereShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSphereShape(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCylinderShape CastToChCylinderShape(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChCylinderShape(ChAsset.getCPtr(in_obj));
    ChCylinderShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCylinderShape(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTexture CastToChTexture(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChTexture(ChAsset.getCPtr(in_obj));
    ChTexture ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTexture(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChAssetLevel CastToChAssetLevel(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChAssetLevel(ChAsset.getCPtr(in_obj));
    ChAssetLevel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChAssetLevel(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCamera CastToChCamera(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChCamera(ChAsset.getCPtr(in_obj));
    ChCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCamera(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLineShape CastToChLineShape(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLineShape(ChAsset.getCPtr(in_obj));
    ChLineShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLineShape(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSurfaceShape CastToChSurfaceShape(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChSurfaceShape(ChAsset.getCPtr(in_obj));
    ChSurfaceShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSurfaceShape(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPathShape CastToChPathShape(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChPathShape(ChAsset.getCPtr(in_obj));
    ChPathShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPathShape(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPointPointDrawing CastToChPointPointDrawing(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChPointPointDrawing(ChAsset.getCPtr(in_obj));
    ChPointPointDrawing ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPointPointDrawing(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPointPointSegment CastToChPointPointSegment(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChPointPointSegment(ChAsset.getCPtr(in_obj));
    ChPointPointSegment ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPointPointSegment(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChPointPointSpring CastToChPointPointSpring(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChPointPointSpring(ChAsset.getCPtr(in_obj));
    ChPointPointSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPointPointSpring(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshShape CastToChTriangleMeshShape(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChTriangleMeshShape(ChAsset.getCPtr(in_obj));
    ChTriangleMeshShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshShape(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChEllipsoidShape CastToChEllipsoidShape(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChEllipsoidShape(ChAsset.getCPtr(in_obj));
    ChEllipsoidShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChEllipsoidShape(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualMaterial CastToChVisualMaterial(ChAsset in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChVisualMaterial(ChAsset.getCPtr(in_obj));
    ChVisualMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualMaterial(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChBody__SWIG_1(ChBodyFrame.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyAuxRef CastToChBodyAuxRef(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChBodyAuxRef__SWIG_0(ChBodyFrame.getCPtr(in_obj));
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChConveyor CastToChConveyor(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChConveyor__SWIG_0(ChBodyFrame.getCPtr(in_obj));
    ChConveyor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChConveyor(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyFrame CastToChBodyFrame(ChBody in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChBodyFrame__SWIG_0(ChBody.getCPtr(in_obj));
    ChBodyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyFrame(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyFrame CastToChBodyFrame(ChBodyAuxRef in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChBodyFrame__SWIG_1(ChBodyAuxRef.getCPtr(in_obj));
    ChBodyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyFrame(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChBody__SWIG_2(ChPhysicsItem.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChConveyor CastToChConveyor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChConveyor__SWIG_1(ChPhysicsItem.getCPtr(in_obj));
    ChConveyor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChConveyor(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyAuxRef CastToChBodyAuxRef(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChBodyAuxRef__SWIG_1(ChPhysicsItem.getCPtr(in_obj));
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChIndexedParticles CastToChIndexedParticles(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChIndexedParticles(ChPhysicsItem.getCPtr(in_obj));
    ChIndexedParticles ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIndexedParticles(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChParticlesClones CastToChParticlesClones(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChParticlesClones(ChPhysicsItem.getCPtr(in_obj));
    ChParticlesClones ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChParticlesClones(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLink CastToChLink(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLink(ChPhysicsItem.getCPtr(in_obj));
    ChLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLink(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMarkers CastToChLinkMarkers(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMarkers__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMarkers ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMarkers(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLock CastToChLinkLock(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLock__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLock(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockLock CastToChLinkLockLock(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockLock__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockLock(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockRevolute CastToChLinkLockRevolute(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockRevolute__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockRevolute(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockSpherical CastToChLinkLockSpherical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockSpherical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockSpherical(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockCylindrical CastToChLinkLockCylindrical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockCylindrical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockCylindrical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockCylindrical(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPrismatic CastToChLinkLockPrismatic(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockPrismatic__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPrismatic(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointPlane CastToChLinkLockPointPlane(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockPointPlane__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPointPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointPlane(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointLine CastToChLinkLockPointLine(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockPointLine__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPointLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointLine(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockOldham CastToChLinkLockOldham(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockOldham__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockOldham ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockOldham(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockFree CastToChLinkLockFree(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockFree__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockFree ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockFree(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockAlign CastToChLinkLockAlign(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockAlign__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockAlign ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockAlign(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockParallel CastToChLinkLockParallel(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockParallel__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockParallel(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPerpend CastToChLinkLockPerpend(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockPerpend__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPerpend ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPerpend(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMate CastToChLinkMate(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMate__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMate(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateGeneric CastToChLinkMateGeneric(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateGeneric__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateGeneric(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePlane CastToChLinkMatePlane(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMatePlane__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMatePlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePlane(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateCoaxial CastToChLinkMateCoaxial(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateCoaxial__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateCoaxial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateCoaxial(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateSpherical CastToChLinkMateSpherical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateSpherical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateSpherical(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateXdistance CastToChLinkMateXdistance(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateXdistance__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateXdistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateXdistance(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateParallel CastToChLinkMateParallel(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateParallel__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateParallel(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateOrthogonal CastToChLinkMateOrthogonal(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateOrthogonal__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateOrthogonal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateOrthogonal(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateFix CastToChLinkMateFix(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateFix__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateFix ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateFix(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkGear CastToChLinkGear(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkGear__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkGear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkGear(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkDistance CastToChLinkDistance(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkDistance__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkDistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkDistance(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLinActuator CastToChLinkLinActuator(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLinActuator__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLinActuator ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLinActuator(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkPulley CastToChLinkPulley(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkPulley__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkPulley ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkPulley(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkScrew CastToChLinkScrew(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkScrew__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkScrew ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkScrew(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkSpring CastToChLinkSpring(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkSpring__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkSpring(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkTSDA CastToChLinkTSDA(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkTSDA__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkTSDA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkTSDA(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkRotSpringCB CastToChLinkRotSpringCB(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkRotSpringCB(ChPhysicsItem.getCPtr(in_obj));
    ChLinkRotSpringCB ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkRotSpringCB(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotor CastToChLinkMotor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotor(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotor(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinear CastToChLinkMotorLinear(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorLinear(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinear(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearDriveline CastToChLinkMotorLinearDriveline(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorLinearDriveline(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearDriveline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearDriveline(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearForce CastToChLinkMotorLinearForce(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorLinearForce(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearForce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearForce(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearPosition CastToChLinkMotorLinearPosition(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorLinearPosition(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearPosition ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearPosition(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearSpeed CastToChLinkMotorLinearSpeed(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorLinearSpeed(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearSpeed ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearSpeed(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotation CastToChLinkMotorRotation(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorRotation(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotation(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationAngle CastToChLinkMotorRotationAngle(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorRotationAngle(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationAngle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationAngle(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationDriveline CastToChLinkMotorRotationDriveline(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorRotationDriveline(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationDriveline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationDriveline(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationSpeed CastToChLinkMotorRotationSpeed(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorRotationSpeed(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationSpeed ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationSpeed(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationTorque CastToChLinkMotorRotationTorque(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMotorRotationTorque(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationTorque(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadContainer CastToChLoadContainer(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadContainer(ChPhysicsItem.getCPtr(in_obj));
    ChLoadContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadContainer(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMarkers CastToChLinkMarkers(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMarkers__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMarkers ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMarkers(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLock CastToChLinkLock(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLock__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLock(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockLock CastToChLinkLockLock(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockLock__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockLock(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockRevolute CastToChLinkLockRevolute(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockRevolute__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockRevolute(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockSpherical CastToChLinkLockSpherical(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockSpherical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockSpherical(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockCylindrical CastToChLinkLockCylindrical(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockCylindrical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockCylindrical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockCylindrical(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPrismatic CastToChLinkLockPrismatic(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockPrismatic__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPrismatic(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointPlane CastToChLinkLockPointPlane(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockPointPlane__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPointPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointPlane(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointLine CastToChLinkLockPointLine(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockPointLine__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPointLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointLine(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockOldham CastToChLinkLockOldham(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockOldham__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockOldham ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockOldham(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockFree CastToChLinkLockFree(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockFree__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockFree ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockFree(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockAlign CastToChLinkLockAlign(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockAlign__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockAlign ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockAlign(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockParallel CastToChLinkLockParallel(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockParallel__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockParallel(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPerpend CastToChLinkLockPerpend(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLockPerpend__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPerpend ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPerpend(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMate CastToChLinkMate(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMate__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMate(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateGeneric CastToChLinkMateGeneric(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateGeneric__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateGeneric(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePlane CastToChLinkMatePlane(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMatePlane__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMatePlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePlane(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateCoaxial CastToChLinkMateCoaxial(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateCoaxial__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateCoaxial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateCoaxial(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateSpherical CastToChLinkMateSpherical(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateSpherical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateSpherical(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateXdistance CastToChLinkMateXdistance(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateXdistance__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateXdistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateXdistance(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateParallel CastToChLinkMateParallel(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateParallel__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateParallel(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateOrthogonal CastToChLinkMateOrthogonal(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateOrthogonal__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateOrthogonal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateOrthogonal(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateFix CastToChLinkMateFix(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkMateFix__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateFix ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateFix(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkGear CastToChLinkGear(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkGear__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkGear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkGear(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkDistance CastToChLinkDistance(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkDistance__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkDistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkDistance(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLinActuator CastToChLinkLinActuator(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkLinActuator__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLinActuator ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLinActuator(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkPulley CastToChLinkPulley(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkPulley__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkPulley ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkPulley(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkScrew CastToChLinkScrew(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkScrew__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkScrew ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkScrew(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkSpring CastToChLinkSpring(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkSpring__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkSpring(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkTSDA CastToChLinkTSDA(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkTSDA__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkTSDA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkTSDA(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkPointSpline CastToChLinkPointSpline(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkPointSpline(ChLink.getCPtr(in_obj));
    ChLinkPointSpline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkPointSpline(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkTrajectory CastToChLinkTrajectory(ChLink in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLinkTrajectory(ChLink.getCPtr(in_obj));
    ChLinkTrajectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkTrajectory(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Const CastToChFunction_Const(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Const(ChFunction.getCPtr(in_obj));
    ChFunction_Const ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Const(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_ConstAcc CastToChFunction_ConstAcc(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_ConstAcc(ChFunction.getCPtr(in_obj));
    ChFunction_ConstAcc ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_ConstAcc(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Derive CastToChFunction_Derive(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Derive(ChFunction.getCPtr(in_obj));
    ChFunction_Derive ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Derive(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Fillet3 CastToChFunction_Fillet3(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Fillet3(ChFunction.getCPtr(in_obj));
    ChFunction_Fillet3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Fillet3(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Integrate CastToChFunction_Integrate(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Integrate(ChFunction.getCPtr(in_obj));
    ChFunction_Integrate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Integrate(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Mirror CastToChFunction_Mirror(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Mirror(ChFunction.getCPtr(in_obj));
    ChFunction_Mirror ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Mirror(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Mocap CastToChFunction_Mocap(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Mocap(ChFunction.getCPtr(in_obj));
    ChFunction_Mocap ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Mocap(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Noise CastToChFunction_Noise(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Noise(ChFunction.getCPtr(in_obj));
    ChFunction_Noise ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Noise(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Operation CastToChFunction_Operation(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Operation(ChFunction.getCPtr(in_obj));
    ChFunction_Operation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Operation(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Oscilloscope CastToChFunction_Oscilloscope(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Oscilloscope(ChFunction.getCPtr(in_obj));
    ChFunction_Oscilloscope ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Oscilloscope(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Poly CastToChFunction_Poly(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Poly(ChFunction.getCPtr(in_obj));
    ChFunction_Poly ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Poly(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Poly345 CastToChFunction_Poly345(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Poly345(ChFunction.getCPtr(in_obj));
    ChFunction_Poly345 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Poly345(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Ramp CastToChFunction_Ramp(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Ramp(ChFunction.getCPtr(in_obj));
    ChFunction_Ramp ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Ramp(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Recorder CastToChFunction_Recorder(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Recorder(ChFunction.getCPtr(in_obj));
    ChFunction_Recorder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Recorder(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Repeat CastToChFunction_Repeat(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Repeat(ChFunction.getCPtr(in_obj));
    ChFunction_Repeat ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Repeat(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Sequence CastToChFunction_Sequence(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Sequence(ChFunction.getCPtr(in_obj));
    ChFunction_Sequence ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Sequence(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Sigma CastToChFunction_Sigma(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Sigma(ChFunction.getCPtr(in_obj));
    ChFunction_Sigma ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Sigma(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunction_Sine CastToChFunction_Sine(ChFunction in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChFunction_Sine(ChFunction.getCPtr(in_obj));
    ChFunction_Sine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction_Sine(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaft CastToChShaft(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaft(ChPhysicsItem.getCPtr(in_obj));
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsBody CastToChShaftsBody(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaftsBody(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsCouple CastToChShaftsCouple(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaftsCouple(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsCouple ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsCouple(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsClutch CastToChShaftsClutch(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaftsClutch(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsClutch ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsClutch(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsMotor CastToChShaftsMotor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaftsMotor(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsMotor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsMotor(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsTorsionSpring CastToChShaftsTorsionSpring(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaftsTorsionSpring(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsTorsionSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsTorsionSpring(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsPlanetary CastToChShaftsPlanetary(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaftsPlanetary(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsPlanetary ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsPlanetary(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsTorqueBase CastToChShaftsTorqueBase(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaftsTorqueBase(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsTorqueBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsTorqueBase(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsThermalEngine CastToChShaftsThermalEngine(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChShaftsThermalEngine(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsThermalEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsThermalEngine(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadCustom CastToChLoadCustom(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadCustom(ChLoadBase.getCPtr(in_obj));
    ChLoadCustom ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadCustom(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadCustomMultiple CastToChLoadCustomMultiple(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadCustomMultiple(ChLoadBase.getCPtr(in_obj));
    ChLoadCustomMultiple ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadCustomMultiple(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyForce CastToChLoadBodyForce(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadBodyForce(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyForce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyForce(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyTorque CastToChLoadBodyTorque(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadBodyTorque(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyTorque(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBody CastToChLoadBodyBody(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadBodyBody(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBody(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyTorque CastToChLoadBodyBodyTorque(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadBodyBodyTorque(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyTorque(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingSpherical CastToChLoadBodyBodyBushingSpherical(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadBodyBodyBushingSpherical(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingSpherical(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingPlastic CastToChLoadBodyBodyBushingPlastic(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadBodyBodyBushingPlastic(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingPlastic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingPlastic(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingMate CastToChLoadBodyBodyBushingMate(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadBodyBodyBushingMate(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingMate(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingGeneric CastToChLoadBodyBodyBushingGeneric(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChLoadBodyBodyBushingGeneric(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingGeneric(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshConnected CastToChTriangleMeshConnected(ChGeometry in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChTriangleMeshConnected(ChGeometry.getCPtr(in_obj));
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshSoup CastToChTriangleMeshSoup(ChGeometry in_obj) {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.CastToChTriangleMeshSoup(ChGeometry.getCPtr(in_obj));
    ChTriangleMeshSoup ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshSoup(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly string EIGEN_MATRIXBASE_PLUGIN = ChronoEngine_csharpPINVOKE.EIGEN_MATRIXBASE_PLUGIN_get();
  public static readonly string EIGEN_SPARSEMATRIX_PLUGIN = ChronoEngine_csharpPINVOKE.EIGEN_SPARSEMATRIX_PLUGIN_get();
}
