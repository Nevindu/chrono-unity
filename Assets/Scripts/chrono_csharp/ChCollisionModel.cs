//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChCollisionModel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChCollisionModel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChCollisionModel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChCollisionModel() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          ChronoEngine_csharpPINVOKE.delete_ChCollisionModel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChCollisionModel() : this(ChronoEngine_csharpPINVOKE.new_ChCollisionModel(), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual int ClearModel() {
    int ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_ClearModel(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int BuildModel() {
    int ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_BuildModel(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddSphere(ChMaterialSurface material, double radius, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddSphere__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddSphere(ChMaterialSurface material, double radius) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddSphere__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddEllipsoid(ChMaterialSurface material, double rx, double ry, double rz, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddEllipsoid__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), rx, ry, rz, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddEllipsoid(ChMaterialSurface material, double rx, double ry, double rz, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddEllipsoid__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), rx, ry, rz, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddEllipsoid(ChMaterialSurface material, double rx, double ry, double rz) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddEllipsoid__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), rx, ry, rz);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddBox(ChMaterialSurface material, double hx, double hy, double hz, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddBox__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), hx, hy, hz, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddBox(ChMaterialSurface material, double hx, double hy, double hz, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddBox__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), hx, hy, hz, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddBox(ChMaterialSurface material, double hx, double hy, double hz) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddBox__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), hx, hy, hz);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCylinder(ChMaterialSurface material, double rx, double rz, double hy, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCylinder__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCylinder(ChMaterialSurface material, double rx, double rz, double hy, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCylinder__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCylinder(ChMaterialSurface material, double rx, double rz, double hy) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCylinder__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCone(ChMaterialSurface material, double rx, double rz, double hy, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCone__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCone(ChMaterialSurface material, double rx, double rz, double hy, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCone__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCone(ChMaterialSurface material, double rx, double rz, double hy) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCone__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCapsule(ChMaterialSurface material, double radius, double hlen, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCapsule__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, hlen, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCapsule(ChMaterialSurface material, double radius, double hlen, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCapsule__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius, hlen, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCapsule(ChMaterialSurface material, double radius, double hlen) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCapsule__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), radius, hlen);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedBox(ChMaterialSurface material, double hx, double hy, double hz, double sphere_r, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedBox__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), hx, hy, hz, sphere_r, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedBox(ChMaterialSurface material, double hx, double hy, double hz, double sphere_r, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedBox__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), hx, hy, hz, sphere_r, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedBox(ChMaterialSurface material, double hx, double hy, double hz, double sphere_r) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedBox__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), hx, hy, hz, sphere_r);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedCylinder(ChMaterialSurface material, double rx, double rz, double hy, double sphere_r, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedCylinder__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, sphere_r, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedCylinder(ChMaterialSurface material, double rx, double rz, double hy, double sphere_r, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedCylinder__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, sphere_r, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedCylinder(ChMaterialSurface material, double rx, double rz, double hy, double sphere_r) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedCylinder__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, sphere_r);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedCone(ChMaterialSurface material, double rx, double rz, double hy, double sphere_r, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedCone__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, sphere_r, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedCone(ChMaterialSurface material, double rx, double rz, double hy, double sphere_r, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedCone__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, sphere_r, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddRoundedCone(ChMaterialSurface material, double rx, double rz, double hy, double sphere_r) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddRoundedCone__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), rx, rz, hy, sphere_r);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddConvexHull(ChMaterialSurface material, vector_ChVectorD pointlist, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHull__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), vector_ChVectorD.getCPtr(pointlist), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddConvexHull(ChMaterialSurface material, vector_ChVectorD pointlist, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHull__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), vector_ChVectorD.getCPtr(pointlist), ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddConvexHull(ChMaterialSurface material, vector_ChVectorD pointlist) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHull__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), vector_ChVectorD.getCPtr(pointlist));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMesh(ChMaterialSurface material, ChTriangleMesh trimesh, bool is_static, bool is_convex, ChVectorD pos, ChMatrix33D rot, double sphereswept_thickness) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddTriangleMesh__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), is_static, is_convex, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot), sphereswept_thickness);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMesh(ChMaterialSurface material, ChTriangleMesh trimesh, bool is_static, bool is_convex, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddTriangleMesh__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), is_static, is_convex, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMesh(ChMaterialSurface material, ChTriangleMesh trimesh, bool is_static, bool is_convex, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddTriangleMesh__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), is_static, is_convex, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMesh(ChMaterialSurface material, ChTriangleMesh trimesh, bool is_static, bool is_convex) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddTriangleMesh__SWIG_3(swigCPtr, ChMaterialSurface.getCPtr(material), ChTriangleMesh.getCPtr(trimesh), is_static, is_convex);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddBarrel(ChMaterialSurface material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset, ChVectorD pos, ChMatrix33D rot) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddBarrel__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), Y_low, Y_high, R_vert, R_hor, R_offset, ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddBarrel(ChMaterialSurface material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset, ChVectorD pos) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddBarrel__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), Y_low, Y_high, R_vert, R_hor, R_offset, ChVectorD.getCPtr(pos));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddBarrel(ChMaterialSurface material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddBarrel__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), Y_low, Y_high, R_vert, R_hor, R_offset);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Add2Dpath(ChMaterialSurface material, ChLinePath mpath, ChVectorD pos, ChMatrix33D rot, double thickness) {
    bool ret = (SwigDerivedClassHasMethod("Add2Dpath", swigMethodTypes38) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_Add2DpathSwigExplicitChCollisionModel__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot), thickness) : ChronoEngine_csharpPINVOKE.ChCollisionModel_Add2Dpath__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot), thickness));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Add2Dpath(ChMaterialSurface material, ChLinePath mpath, ChVectorD pos, ChMatrix33D rot) {
    bool ret = (SwigDerivedClassHasMethod("Add2Dpath", swigMethodTypes39) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_Add2DpathSwigExplicitChCollisionModel__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot)) : ChronoEngine_csharpPINVOKE.ChCollisionModel_Add2Dpath__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot)));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Add2Dpath(ChMaterialSurface material, ChLinePath mpath, ChVectorD pos) {
    bool ret = (SwigDerivedClassHasMethod("Add2Dpath", swigMethodTypes40) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_Add2DpathSwigExplicitChCollisionModel__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos)) : ChronoEngine_csharpPINVOKE.ChCollisionModel_Add2Dpath__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath), ChVectorD.getCPtr(pos)));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Add2Dpath(ChMaterialSurface material, ChLinePath mpath) {
    bool ret = (SwigDerivedClassHasMethod("Add2Dpath", swigMethodTypes41) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_Add2DpathSwigExplicitChCollisionModel__SWIG_3(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath)) : ChronoEngine_csharpPINVOKE.ChCollisionModel_Add2Dpath__SWIG_3(swigCPtr, ChMaterialSurface.getCPtr(material), ChLinePath.getCPtr(mpath)));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddPoint(ChMaterialSurface material, double radius, ChVectorD pos) {
    bool ret = (SwigDerivedClassHasMethod("AddPoint", swigMethodTypes42) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_AddPointSwigExplicitChCollisionModel__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos)) : ChronoEngine_csharpPINVOKE.ChCollisionModel_AddPoint__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), radius, ChVectorD.getCPtr(pos)));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddPoint(ChMaterialSurface material, double radius) {
    bool ret = (SwigDerivedClassHasMethod("AddPoint", swigMethodTypes43) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_AddPointSwigExplicitChCollisionModel__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius) : ChronoEngine_csharpPINVOKE.ChCollisionModel_AddPoint__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), radius));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddPoint(ChMaterialSurface material) {
    bool ret = (SwigDerivedClassHasMethod("AddPoint", swigMethodTypes44) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_AddPointSwigExplicitChCollisionModel__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material)) : ChronoEngine_csharpPINVOKE.ChCollisionModel_AddPoint__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material)));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddCopyOfAnotherModel(ChCollisionModel another) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_AddCopyOfAnotherModel(swigCPtr, ChCollisionModel.getCPtr(another));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddConvexHullsFromFile(ChMaterialSurface material, ChStreamInAscii mstream, ChVectorD pos, ChMatrix33D rot) {
    bool ret = (SwigDerivedClassHasMethod("AddConvexHullsFromFile", swigMethodTypes46) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHullsFromFileSwigExplicitChCollisionModel__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChStreamInAscii.getCPtr(mstream), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot)) : ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHullsFromFile__SWIG_0(swigCPtr, ChMaterialSurface.getCPtr(material), ChStreamInAscii.getCPtr(mstream), ChVectorD.getCPtr(pos), ChMatrix33D.getCPtr(rot)));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddConvexHullsFromFile(ChMaterialSurface material, ChStreamInAscii mstream, ChVectorD pos) {
    bool ret = (SwigDerivedClassHasMethod("AddConvexHullsFromFile", swigMethodTypes47) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHullsFromFileSwigExplicitChCollisionModel__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChStreamInAscii.getCPtr(mstream), ChVectorD.getCPtr(pos)) : ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHullsFromFile__SWIG_1(swigCPtr, ChMaterialSurface.getCPtr(material), ChStreamInAscii.getCPtr(mstream), ChVectorD.getCPtr(pos)));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddConvexHullsFromFile(ChMaterialSurface material, ChStreamInAscii mstream) {
    bool ret = (SwigDerivedClassHasMethod("AddConvexHullsFromFile", swigMethodTypes48) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHullsFromFileSwigExplicitChCollisionModel__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChStreamInAscii.getCPtr(mstream)) : ChronoEngine_csharpPINVOKE.ChCollisionModel_AddConvexHullsFromFile__SWIG_2(swigCPtr, ChMaterialSurface.getCPtr(material), ChStreamInAscii.getCPtr(mstream)));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChContactable GetContactable() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChCollisionModel_GetContactable(swigCPtr);
    SWIGTYPE_p_ChContactable ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ChContactable(cPtr, false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetContactable(SWIGTYPE_p_ChContactable mc) {
    if (SwigDerivedClassHasMethod("SetContactable", swigMethodTypes49)) ChronoEngine_csharpPINVOKE.ChCollisionModel_SetContactableSwigExplicitChCollisionModel(swigCPtr, SWIGTYPE_p_ChContactable.getCPtr(mc)); else ChronoEngine_csharpPINVOKE.ChCollisionModel_SetContactable(swigCPtr, SWIGTYPE_p_ChContactable.getCPtr(mc));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChPhysicsItem GetPhysicsItem() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChCollisionModel_GetPhysicsItem(swigCPtr);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SyncPosition() {
    ChronoEngine_csharpPINVOKE.ChCollisionModel_SyncPosition(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetFamily(int mfamily) {
    if (SwigDerivedClassHasMethod("SetFamily", swigMethodTypes51)) ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilySwigExplicitChCollisionModel(swigCPtr, mfamily); else ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamily(swigCPtr, mfamily);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetFamily() {
    int ret = (SwigDerivedClassHasMethod("GetFamily", swigMethodTypes52) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_GetFamilySwigExplicitChCollisionModel(swigCPtr) : ChronoEngine_csharpPINVOKE.ChCollisionModel_GetFamily(swigCPtr));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetFamilyMaskNoCollisionWithFamily(int mfamily) {
    if (SwigDerivedClassHasMethod("SetFamilyMaskNoCollisionWithFamily", swigMethodTypes53)) ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilyMaskNoCollisionWithFamilySwigExplicitChCollisionModel(swigCPtr, mfamily); else ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilyMaskNoCollisionWithFamily(swigCPtr, mfamily);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetFamilyMaskDoCollisionWithFamily(int mfamily) {
    if (SwigDerivedClassHasMethod("SetFamilyMaskDoCollisionWithFamily", swigMethodTypes54)) ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilyMaskDoCollisionWithFamilySwigExplicitChCollisionModel(swigCPtr, mfamily); else ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilyMaskDoCollisionWithFamily(swigCPtr, mfamily);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool GetFamilyMaskDoesCollisionWithFamily(int mfamily) {
    bool ret = (SwigDerivedClassHasMethod("GetFamilyMaskDoesCollisionWithFamily", swigMethodTypes55) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_GetFamilyMaskDoesCollisionWithFamilySwigExplicitChCollisionModel(swigCPtr, mfamily) : ChronoEngine_csharpPINVOKE.ChCollisionModel_GetFamilyMaskDoesCollisionWithFamily(swigCPtr, mfamily));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual short GetFamilyGroup() {
    short ret = (SwigDerivedClassHasMethod("GetFamilyGroup", swigMethodTypes56) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_GetFamilyGroupSwigExplicitChCollisionModel(swigCPtr) : ChronoEngine_csharpPINVOKE.ChCollisionModel_GetFamilyGroup(swigCPtr));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetFamilyGroup(short group) {
    if (SwigDerivedClassHasMethod("SetFamilyGroup", swigMethodTypes57)) ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilyGroupSwigExplicitChCollisionModel(swigCPtr, group); else ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilyGroup(swigCPtr, group);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual short GetFamilyMask() {
    short ret = (SwigDerivedClassHasMethod("GetFamilyMask", swigMethodTypes58) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_GetFamilyMaskSwigExplicitChCollisionModel(swigCPtr) : ChronoEngine_csharpPINVOKE.ChCollisionModel_GetFamilyMask(swigCPtr));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetFamilyMask(short mask) {
    if (SwigDerivedClassHasMethod("SetFamilyMask", swigMethodTypes59)) ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilyMaskSwigExplicitChCollisionModel(swigCPtr, mask); else ChronoEngine_csharpPINVOKE.ChCollisionModel_SetFamilyMask(swigCPtr, mask);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSafeMargin(double amargin) {
    if (SwigDerivedClassHasMethod("SetSafeMargin", swigMethodTypes60)) ChronoEngine_csharpPINVOKE.ChCollisionModel_SetSafeMarginSwigExplicitChCollisionModel(swigCPtr, amargin); else ChronoEngine_csharpPINVOKE.ChCollisionModel_SetSafeMargin(swigCPtr, amargin);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float GetSafeMargin() {
    float ret = (SwigDerivedClassHasMethod("GetSafeMargin", swigMethodTypes61) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_GetSafeMarginSwigExplicitChCollisionModel(swigCPtr) : ChronoEngine_csharpPINVOKE.ChCollisionModel_GetSafeMargin(swigCPtr));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetEnvelope(double amargin) {
    if (SwigDerivedClassHasMethod("SetEnvelope", swigMethodTypes62)) ChronoEngine_csharpPINVOKE.ChCollisionModel_SetEnvelopeSwigExplicitChCollisionModel(swigCPtr, amargin); else ChronoEngine_csharpPINVOKE.ChCollisionModel_SetEnvelope(swigCPtr, amargin);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual float GetEnvelope() {
    float ret = (SwigDerivedClassHasMethod("GetEnvelope", swigMethodTypes63) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_GetEnvelopeSwigExplicitChCollisionModel(swigCPtr) : ChronoEngine_csharpPINVOKE.ChCollisionModel_GetEnvelope(swigCPtr));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetDefaultSuggestedEnvelope(double menv) {
    ChronoEngine_csharpPINVOKE.ChCollisionModel_SetDefaultSuggestedEnvelope(menv);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetDefaultSuggestedMargin(double mmargin) {
    ChronoEngine_csharpPINVOKE.ChCollisionModel_SetDefaultSuggestedMargin(mmargin);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double GetDefaultSuggestedEnvelope() {
    double ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_GetDefaultSuggestedEnvelope();
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double GetDefaultSuggestedMargin() {
    double ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_GetDefaultSuggestedMargin();
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void GetAABB(ChVectorD bbmin, ChVectorD bbmax) {
    ChronoEngine_csharpPINVOKE.ChCollisionModel_GetAABB(swigCPtr, ChVectorD.getCPtr(bbmin), ChVectorD.getCPtr(bbmax));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOUT(SWIGTYPE_p_ChArchiveOut marchive) {
    if (SwigDerivedClassHasMethod("ArchiveOUT", swigMethodTypes65)) ChronoEngine_csharpPINVOKE.ChCollisionModel_ArchiveOUTSwigExplicitChCollisionModel(swigCPtr, SWIGTYPE_p_ChArchiveOut.getCPtr(marchive)); else ChronoEngine_csharpPINVOKE.ChCollisionModel_ArchiveOUT(swigCPtr, SWIGTYPE_p_ChArchiveOut.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIN(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    if (SwigDerivedClassHasMethod("ArchiveIN", swigMethodTypes66)) ChronoEngine_csharpPINVOKE.ChCollisionModel_ArchiveINSwigExplicitChCollisionModel(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive)); else ChronoEngine_csharpPINVOKE.ChCollisionModel_ArchiveIN(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetNumShapes() {
    int ret = ChronoEngine_csharpPINVOKE.ChCollisionModel_GetNumShapes(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChCollisionShape_t_t GetShapes() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChCollisionShape_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChCollisionShape_t_t(ChronoEngine_csharpPINVOKE.ChCollisionModel_GetShapes(swigCPtr), false);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChCollisionShape_t GetShape(int index) {
    SWIGTYPE_p_std__shared_ptrT_ChCollisionShape_t ret = new SWIGTYPE_p_std__shared_ptrT_ChCollisionShape_t(ChronoEngine_csharpPINVOKE.ChCollisionModel_GetShape(swigCPtr, index), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChCoordsysD GetShapePos(int index) {
    ChCoordsysD ret = new ChCoordsysD(ChronoEngine_csharpPINVOKE.ChCollisionModel_GetShapePos(swigCPtr, index), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__vectorT_double_t GetShapeDimensions(int index) {
    SWIGTYPE_p_std__vectorT_double_t ret = new SWIGTYPE_p_std__vectorT_double_t(ChronoEngine_csharpPINVOKE.ChCollisionModel_GetShapeDimensions(swigCPtr, index), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetShapeMaterial(int index, ChMaterialSurface mat) {
    ChronoEngine_csharpPINVOKE.ChCollisionModel_SetShapeMaterial(swigCPtr, index, ChMaterialSurface.getCPtr(mat));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAllShapesMaterial(ChMaterialSurface mat) {
    ChronoEngine_csharpPINVOKE.ChCollisionModel_SetAllShapesMaterial(swigCPtr, ChMaterialSurface.getCPtr(mat));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual float GetSuggestedFullMargin() {
    float ret = (SwigDerivedClassHasMethod("GetSuggestedFullMargin", swigMethodTypes69) ? ChronoEngine_csharpPINVOKE.ChCollisionModel_GetSuggestedFullMarginSwigExplicitChCollisionModel(swigCPtr) : ChronoEngine_csharpPINVOKE.ChCollisionModel_GetSuggestedFullMargin(swigCPtr));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("ClearModel", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChCollisionModel_0(SwigDirectorMethodClearModel);
    if (SwigDerivedClassHasMethod("BuildModel", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChCollisionModel_1(SwigDirectorMethodBuildModel);
    if (SwigDerivedClassHasMethod("AddSphere", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChCollisionModel_2(SwigDirectorMethodAddSphere__SWIG_0);
    if (SwigDerivedClassHasMethod("AddSphere", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChCollisionModel_3(SwigDirectorMethodAddSphere__SWIG_1);
    if (SwigDerivedClassHasMethod("AddEllipsoid", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChCollisionModel_4(SwigDirectorMethodAddEllipsoid__SWIG_0);
    if (SwigDerivedClassHasMethod("AddEllipsoid", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChCollisionModel_5(SwigDirectorMethodAddEllipsoid__SWIG_1);
    if (SwigDerivedClassHasMethod("AddEllipsoid", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateChCollisionModel_6(SwigDirectorMethodAddEllipsoid__SWIG_2);
    if (SwigDerivedClassHasMethod("AddBox", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateChCollisionModel_7(SwigDirectorMethodAddBox__SWIG_0);
    if (SwigDerivedClassHasMethod("AddBox", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateChCollisionModel_8(SwigDirectorMethodAddBox__SWIG_1);
    if (SwigDerivedClassHasMethod("AddBox", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateChCollisionModel_9(SwigDirectorMethodAddBox__SWIG_2);
    if (SwigDerivedClassHasMethod("AddCylinder", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateChCollisionModel_10(SwigDirectorMethodAddCylinder__SWIG_0);
    if (SwigDerivedClassHasMethod("AddCylinder", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateChCollisionModel_11(SwigDirectorMethodAddCylinder__SWIG_1);
    if (SwigDerivedClassHasMethod("AddCylinder", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateChCollisionModel_12(SwigDirectorMethodAddCylinder__SWIG_2);
    if (SwigDerivedClassHasMethod("AddCone", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateChCollisionModel_13(SwigDirectorMethodAddCone__SWIG_0);
    if (SwigDerivedClassHasMethod("AddCone", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateChCollisionModel_14(SwigDirectorMethodAddCone__SWIG_1);
    if (SwigDerivedClassHasMethod("AddCone", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateChCollisionModel_15(SwigDirectorMethodAddCone__SWIG_2);
    if (SwigDerivedClassHasMethod("AddCapsule", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateChCollisionModel_16(SwigDirectorMethodAddCapsule__SWIG_0);
    if (SwigDerivedClassHasMethod("AddCapsule", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateChCollisionModel_17(SwigDirectorMethodAddCapsule__SWIG_1);
    if (SwigDerivedClassHasMethod("AddCapsule", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateChCollisionModel_18(SwigDirectorMethodAddCapsule__SWIG_2);
    if (SwigDerivedClassHasMethod("AddRoundedBox", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateChCollisionModel_19(SwigDirectorMethodAddRoundedBox__SWIG_0);
    if (SwigDerivedClassHasMethod("AddRoundedBox", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateChCollisionModel_20(SwigDirectorMethodAddRoundedBox__SWIG_1);
    if (SwigDerivedClassHasMethod("AddRoundedBox", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateChCollisionModel_21(SwigDirectorMethodAddRoundedBox__SWIG_2);
    if (SwigDerivedClassHasMethod("AddRoundedCylinder", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateChCollisionModel_22(SwigDirectorMethodAddRoundedCylinder__SWIG_0);
    if (SwigDerivedClassHasMethod("AddRoundedCylinder", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateChCollisionModel_23(SwigDirectorMethodAddRoundedCylinder__SWIG_1);
    if (SwigDerivedClassHasMethod("AddRoundedCylinder", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateChCollisionModel_24(SwigDirectorMethodAddRoundedCylinder__SWIG_2);
    if (SwigDerivedClassHasMethod("AddRoundedCone", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateChCollisionModel_25(SwigDirectorMethodAddRoundedCone__SWIG_0);
    if (SwigDerivedClassHasMethod("AddRoundedCone", swigMethodTypes26))
      swigDelegate26 = new SwigDelegateChCollisionModel_26(SwigDirectorMethodAddRoundedCone__SWIG_1);
    if (SwigDerivedClassHasMethod("AddRoundedCone", swigMethodTypes27))
      swigDelegate27 = new SwigDelegateChCollisionModel_27(SwigDirectorMethodAddRoundedCone__SWIG_2);
    if (SwigDerivedClassHasMethod("AddConvexHull", swigMethodTypes28))
      swigDelegate28 = new SwigDelegateChCollisionModel_28(SwigDirectorMethodAddConvexHull__SWIG_0);
    if (SwigDerivedClassHasMethod("AddConvexHull", swigMethodTypes29))
      swigDelegate29 = new SwigDelegateChCollisionModel_29(SwigDirectorMethodAddConvexHull__SWIG_1);
    if (SwigDerivedClassHasMethod("AddConvexHull", swigMethodTypes30))
      swigDelegate30 = new SwigDelegateChCollisionModel_30(SwigDirectorMethodAddConvexHull__SWIG_2);
    if (SwigDerivedClassHasMethod("AddTriangleMesh", swigMethodTypes31))
      swigDelegate31 = new SwigDelegateChCollisionModel_31(SwigDirectorMethodAddTriangleMesh__SWIG_0);
    if (SwigDerivedClassHasMethod("AddTriangleMesh", swigMethodTypes32))
      swigDelegate32 = new SwigDelegateChCollisionModel_32(SwigDirectorMethodAddTriangleMesh__SWIG_1);
    if (SwigDerivedClassHasMethod("AddTriangleMesh", swigMethodTypes33))
      swigDelegate33 = new SwigDelegateChCollisionModel_33(SwigDirectorMethodAddTriangleMesh__SWIG_2);
    if (SwigDerivedClassHasMethod("AddTriangleMesh", swigMethodTypes34))
      swigDelegate34 = new SwigDelegateChCollisionModel_34(SwigDirectorMethodAddTriangleMesh__SWIG_3);
    if (SwigDerivedClassHasMethod("AddBarrel", swigMethodTypes35))
      swigDelegate35 = new SwigDelegateChCollisionModel_35(SwigDirectorMethodAddBarrel__SWIG_0);
    if (SwigDerivedClassHasMethod("AddBarrel", swigMethodTypes36))
      swigDelegate36 = new SwigDelegateChCollisionModel_36(SwigDirectorMethodAddBarrel__SWIG_1);
    if (SwigDerivedClassHasMethod("AddBarrel", swigMethodTypes37))
      swigDelegate37 = new SwigDelegateChCollisionModel_37(SwigDirectorMethodAddBarrel__SWIG_2);
    if (SwigDerivedClassHasMethod("Add2Dpath", swigMethodTypes38))
      swigDelegate38 = new SwigDelegateChCollisionModel_38(SwigDirectorMethodAdd2Dpath__SWIG_0);
    if (SwigDerivedClassHasMethod("Add2Dpath", swigMethodTypes39))
      swigDelegate39 = new SwigDelegateChCollisionModel_39(SwigDirectorMethodAdd2Dpath__SWIG_1);
    if (SwigDerivedClassHasMethod("Add2Dpath", swigMethodTypes40))
      swigDelegate40 = new SwigDelegateChCollisionModel_40(SwigDirectorMethodAdd2Dpath__SWIG_2);
    if (SwigDerivedClassHasMethod("Add2Dpath", swigMethodTypes41))
      swigDelegate41 = new SwigDelegateChCollisionModel_41(SwigDirectorMethodAdd2Dpath__SWIG_3);
    if (SwigDerivedClassHasMethod("AddPoint", swigMethodTypes42))
      swigDelegate42 = new SwigDelegateChCollisionModel_42(SwigDirectorMethodAddPoint__SWIG_0);
    if (SwigDerivedClassHasMethod("AddPoint", swigMethodTypes43))
      swigDelegate43 = new SwigDelegateChCollisionModel_43(SwigDirectorMethodAddPoint__SWIG_1);
    if (SwigDerivedClassHasMethod("AddPoint", swigMethodTypes44))
      swigDelegate44 = new SwigDelegateChCollisionModel_44(SwigDirectorMethodAddPoint__SWIG_2);
    if (SwigDerivedClassHasMethod("AddCopyOfAnotherModel", swigMethodTypes45))
      swigDelegate45 = new SwigDelegateChCollisionModel_45(SwigDirectorMethodAddCopyOfAnotherModel);
    if (SwigDerivedClassHasMethod("AddConvexHullsFromFile", swigMethodTypes46))
      swigDelegate46 = new SwigDelegateChCollisionModel_46(SwigDirectorMethodAddConvexHullsFromFile__SWIG_0);
    if (SwigDerivedClassHasMethod("AddConvexHullsFromFile", swigMethodTypes47))
      swigDelegate47 = new SwigDelegateChCollisionModel_47(SwigDirectorMethodAddConvexHullsFromFile__SWIG_1);
    if (SwigDerivedClassHasMethod("AddConvexHullsFromFile", swigMethodTypes48))
      swigDelegate48 = new SwigDelegateChCollisionModel_48(SwigDirectorMethodAddConvexHullsFromFile__SWIG_2);
    if (SwigDerivedClassHasMethod("SetContactable", swigMethodTypes49))
      swigDelegate49 = new SwigDelegateChCollisionModel_49(SwigDirectorMethodSetContactable);
    if (SwigDerivedClassHasMethod("SyncPosition", swigMethodTypes50))
      swigDelegate50 = new SwigDelegateChCollisionModel_50(SwigDirectorMethodSyncPosition);
    if (SwigDerivedClassHasMethod("SetFamily", swigMethodTypes51))
      swigDelegate51 = new SwigDelegateChCollisionModel_51(SwigDirectorMethodSetFamily);
    if (SwigDerivedClassHasMethod("GetFamily", swigMethodTypes52))
      swigDelegate52 = new SwigDelegateChCollisionModel_52(SwigDirectorMethodGetFamily);
    if (SwigDerivedClassHasMethod("SetFamilyMaskNoCollisionWithFamily", swigMethodTypes53))
      swigDelegate53 = new SwigDelegateChCollisionModel_53(SwigDirectorMethodSetFamilyMaskNoCollisionWithFamily);
    if (SwigDerivedClassHasMethod("SetFamilyMaskDoCollisionWithFamily", swigMethodTypes54))
      swigDelegate54 = new SwigDelegateChCollisionModel_54(SwigDirectorMethodSetFamilyMaskDoCollisionWithFamily);
    if (SwigDerivedClassHasMethod("GetFamilyMaskDoesCollisionWithFamily", swigMethodTypes55))
      swigDelegate55 = new SwigDelegateChCollisionModel_55(SwigDirectorMethodGetFamilyMaskDoesCollisionWithFamily);
    if (SwigDerivedClassHasMethod("GetFamilyGroup", swigMethodTypes56))
      swigDelegate56 = new SwigDelegateChCollisionModel_56(SwigDirectorMethodGetFamilyGroup);
    if (SwigDerivedClassHasMethod("SetFamilyGroup", swigMethodTypes57))
      swigDelegate57 = new SwigDelegateChCollisionModel_57(SwigDirectorMethodSetFamilyGroup);
    if (SwigDerivedClassHasMethod("GetFamilyMask", swigMethodTypes58))
      swigDelegate58 = new SwigDelegateChCollisionModel_58(SwigDirectorMethodGetFamilyMask);
    if (SwigDerivedClassHasMethod("SetFamilyMask", swigMethodTypes59))
      swigDelegate59 = new SwigDelegateChCollisionModel_59(SwigDirectorMethodSetFamilyMask);
    if (SwigDerivedClassHasMethod("SetSafeMargin", swigMethodTypes60))
      swigDelegate60 = new SwigDelegateChCollisionModel_60(SwigDirectorMethodSetSafeMargin);
    if (SwigDerivedClassHasMethod("GetSafeMargin", swigMethodTypes61))
      swigDelegate61 = new SwigDelegateChCollisionModel_61(SwigDirectorMethodGetSafeMargin);
    if (SwigDerivedClassHasMethod("SetEnvelope", swigMethodTypes62))
      swigDelegate62 = new SwigDelegateChCollisionModel_62(SwigDirectorMethodSetEnvelope);
    if (SwigDerivedClassHasMethod("GetEnvelope", swigMethodTypes63))
      swigDelegate63 = new SwigDelegateChCollisionModel_63(SwigDirectorMethodGetEnvelope);
    if (SwigDerivedClassHasMethod("GetAABB", swigMethodTypes64))
      swigDelegate64 = new SwigDelegateChCollisionModel_64(SwigDirectorMethodGetAABB);
    if (SwigDerivedClassHasMethod("ArchiveOUT", swigMethodTypes65))
      swigDelegate65 = new SwigDelegateChCollisionModel_65(SwigDirectorMethodArchiveOUT);
    if (SwigDerivedClassHasMethod("ArchiveIN", swigMethodTypes66))
      swigDelegate66 = new SwigDelegateChCollisionModel_66(SwigDirectorMethodArchiveIN);
    if (SwigDerivedClassHasMethod("GetShapePos", swigMethodTypes67))
      swigDelegate67 = new SwigDelegateChCollisionModel_67(SwigDirectorMethodGetShapePos);
    if (SwigDerivedClassHasMethod("GetShapeDimensions", swigMethodTypes68))
      swigDelegate68 = new SwigDelegateChCollisionModel_68(SwigDirectorMethodGetShapeDimensions);
    if (SwigDerivedClassHasMethod("GetSuggestedFullMargin", swigMethodTypes69))
      swigDelegate69 = new SwigDelegateChCollisionModel_69(SwigDirectorMethodGetSuggestedFullMargin);
    ChronoEngine_csharpPINVOKE.ChCollisionModel_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27, swigDelegate28, swigDelegate29, swigDelegate30, swigDelegate31, swigDelegate32, swigDelegate33, swigDelegate34, swigDelegate35, swigDelegate36, swigDelegate37, swigDelegate38, swigDelegate39, swigDelegate40, swigDelegate41, swigDelegate42, swigDelegate43, swigDelegate44, swigDelegate45, swigDelegate46, swigDelegate47, swigDelegate48, swigDelegate49, swigDelegate50, swigDelegate51, swigDelegate52, swigDelegate53, swigDelegate54, swigDelegate55, swigDelegate56, swigDelegate57, swigDelegate58, swigDelegate59, swigDelegate60, swigDelegate61, swigDelegate62, swigDelegate63, swigDelegate64, swigDelegate65, swigDelegate66, swigDelegate67, swigDelegate68, swigDelegate69);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChCollisionModel));
    return hasDerivedMethod;
  }

  private int SwigDirectorMethodClearModel() {
    return ClearModel();
  }

  private int SwigDirectorMethodBuildModel() {
    return BuildModel();
  }

  private bool SwigDirectorMethodAddSphere__SWIG_0(global::System.IntPtr material, double radius, global::System.IntPtr pos) {
    return AddSphere((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), radius, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddSphere__SWIG_1(global::System.IntPtr material, double radius) {
    return AddSphere((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), radius);
  }

  private bool SwigDirectorMethodAddEllipsoid__SWIG_0(global::System.IntPtr material, double rx, double ry, double rz, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddEllipsoid((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, ry, rz, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddEllipsoid__SWIG_1(global::System.IntPtr material, double rx, double ry, double rz, global::System.IntPtr pos) {
    return AddEllipsoid((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, ry, rz, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddEllipsoid__SWIG_2(global::System.IntPtr material, double rx, double ry, double rz) {
    return AddEllipsoid((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, ry, rz);
  }

  private bool SwigDirectorMethodAddBox__SWIG_0(global::System.IntPtr material, double hx, double hy, double hz, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddBox((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), hx, hy, hz, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddBox__SWIG_1(global::System.IntPtr material, double hx, double hy, double hz, global::System.IntPtr pos) {
    return AddBox((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), hx, hy, hz, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddBox__SWIG_2(global::System.IntPtr material, double hx, double hy, double hz) {
    return AddBox((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), hx, hy, hz);
  }

  private bool SwigDirectorMethodAddCylinder__SWIG_0(global::System.IntPtr material, double rx, double rz, double hy, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddCylinder((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddCylinder__SWIG_1(global::System.IntPtr material, double rx, double rz, double hy, global::System.IntPtr pos) {
    return AddCylinder((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddCylinder__SWIG_2(global::System.IntPtr material, double rx, double rz, double hy) {
    return AddCylinder((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy);
  }

  private bool SwigDirectorMethodAddCone__SWIG_0(global::System.IntPtr material, double rx, double rz, double hy, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddCone((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddCone__SWIG_1(global::System.IntPtr material, double rx, double rz, double hy, global::System.IntPtr pos) {
    return AddCone((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddCone__SWIG_2(global::System.IntPtr material, double rx, double rz, double hy) {
    return AddCone((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy);
  }

  private bool SwigDirectorMethodAddCapsule__SWIG_0(global::System.IntPtr material, double radius, double hlen, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddCapsule((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), radius, hlen, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddCapsule__SWIG_1(global::System.IntPtr material, double radius, double hlen, global::System.IntPtr pos) {
    return AddCapsule((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), radius, hlen, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddCapsule__SWIG_2(global::System.IntPtr material, double radius, double hlen) {
    return AddCapsule((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), radius, hlen);
  }

  private bool SwigDirectorMethodAddRoundedBox__SWIG_0(global::System.IntPtr material, double hx, double hy, double hz, double sphere_r, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddRoundedBox((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), hx, hy, hz, sphere_r, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddRoundedBox__SWIG_1(global::System.IntPtr material, double hx, double hy, double hz, double sphere_r, global::System.IntPtr pos) {
    return AddRoundedBox((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), hx, hy, hz, sphere_r, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddRoundedBox__SWIG_2(global::System.IntPtr material, double hx, double hy, double hz, double sphere_r) {
    return AddRoundedBox((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), hx, hy, hz, sphere_r);
  }

  private bool SwigDirectorMethodAddRoundedCylinder__SWIG_0(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddRoundedCylinder((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, sphere_r, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddRoundedCylinder__SWIG_1(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r, global::System.IntPtr pos) {
    return AddRoundedCylinder((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, sphere_r, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddRoundedCylinder__SWIG_2(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r) {
    return AddRoundedCylinder((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, sphere_r);
  }

  private bool SwigDirectorMethodAddRoundedCone__SWIG_0(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddRoundedCone((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, sphere_r, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddRoundedCone__SWIG_1(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r, global::System.IntPtr pos) {
    return AddRoundedCone((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, sphere_r, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddRoundedCone__SWIG_2(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r) {
    return AddRoundedCone((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), rx, rz, hy, sphere_r);
  }

  private bool SwigDirectorMethodAddConvexHull__SWIG_0(global::System.IntPtr material, global::System.IntPtr pointlist, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddConvexHull((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), new vector_ChVectorD(pointlist, false), new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddConvexHull__SWIG_1(global::System.IntPtr material, global::System.IntPtr pointlist, global::System.IntPtr pos) {
    return AddConvexHull((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), new vector_ChVectorD(pointlist, false), new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddConvexHull__SWIG_2(global::System.IntPtr material, global::System.IntPtr pointlist) {
    return AddConvexHull((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), new vector_ChVectorD(pointlist, false));
  }

  private bool SwigDirectorMethodAddTriangleMesh__SWIG_0(global::System.IntPtr material, global::System.IntPtr trimesh, bool is_static, bool is_convex, global::System.IntPtr pos, global::System.IntPtr rot, double sphereswept_thickness) {
    return AddTriangleMesh((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), (trimesh == global::System.IntPtr.Zero) ? null : new ChTriangleMesh(trimesh, true), is_static, is_convex, new ChVectorD(pos, false), new ChMatrix33D(rot, false), sphereswept_thickness);
  }

  private bool SwigDirectorMethodAddTriangleMesh__SWIG_1(global::System.IntPtr material, global::System.IntPtr trimesh, bool is_static, bool is_convex, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddTriangleMesh((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), (trimesh == global::System.IntPtr.Zero) ? null : new ChTriangleMesh(trimesh, true), is_static, is_convex, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddTriangleMesh__SWIG_2(global::System.IntPtr material, global::System.IntPtr trimesh, bool is_static, bool is_convex, global::System.IntPtr pos) {
    return AddTriangleMesh((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), (trimesh == global::System.IntPtr.Zero) ? null : new ChTriangleMesh(trimesh, true), is_static, is_convex, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddTriangleMesh__SWIG_3(global::System.IntPtr material, global::System.IntPtr trimesh, bool is_static, bool is_convex) {
    return AddTriangleMesh((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), (trimesh == global::System.IntPtr.Zero) ? null : new ChTriangleMesh(trimesh, true), is_static, is_convex);
  }

  private bool SwigDirectorMethodAddBarrel__SWIG_0(global::System.IntPtr material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddBarrel((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), Y_low, Y_high, R_vert, R_hor, R_offset, new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddBarrel__SWIG_1(global::System.IntPtr material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset, global::System.IntPtr pos) {
    return AddBarrel((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), Y_low, Y_high, R_vert, R_hor, R_offset, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddBarrel__SWIG_2(global::System.IntPtr material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset) {
    return AddBarrel((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), Y_low, Y_high, R_vert, R_hor, R_offset);
  }

  private bool SwigDirectorMethodAdd2Dpath__SWIG_0(global::System.IntPtr material, global::System.IntPtr mpath, global::System.IntPtr pos, global::System.IntPtr rot, double thickness) {
    return Add2Dpath((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), (mpath == global::System.IntPtr.Zero) ? null : new ChLinePath(mpath, true), new ChVectorD(pos, false), new ChMatrix33D(rot, false), thickness);
  }

  private bool SwigDirectorMethodAdd2Dpath__SWIG_1(global::System.IntPtr material, global::System.IntPtr mpath, global::System.IntPtr pos, global::System.IntPtr rot) {
    return Add2Dpath((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), (mpath == global::System.IntPtr.Zero) ? null : new ChLinePath(mpath, true), new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAdd2Dpath__SWIG_2(global::System.IntPtr material, global::System.IntPtr mpath, global::System.IntPtr pos) {
    return Add2Dpath((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), (mpath == global::System.IntPtr.Zero) ? null : new ChLinePath(mpath, true), new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAdd2Dpath__SWIG_3(global::System.IntPtr material, global::System.IntPtr mpath) {
    return Add2Dpath((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), (mpath == global::System.IntPtr.Zero) ? null : new ChLinePath(mpath, true));
  }

  private bool SwigDirectorMethodAddPoint__SWIG_0(global::System.IntPtr material, double radius, global::System.IntPtr pos) {
    return AddPoint((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), radius, new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddPoint__SWIG_1(global::System.IntPtr material, double radius) {
    return AddPoint((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), radius);
  }

  private bool SwigDirectorMethodAddPoint__SWIG_2(global::System.IntPtr material) {
    return AddPoint((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true));
  }

  private bool SwigDirectorMethodAddCopyOfAnotherModel(global::System.IntPtr another) {
    return AddCopyOfAnotherModel((another == global::System.IntPtr.Zero) ? null : new ChCollisionModel(another, true));
  }

  private bool SwigDirectorMethodAddConvexHullsFromFile__SWIG_0(global::System.IntPtr material, global::System.IntPtr mstream, global::System.IntPtr pos, global::System.IntPtr rot) {
    return AddConvexHullsFromFile((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), new ChStreamInAscii(mstream, false), new ChVectorD(pos, false), new ChMatrix33D(rot, false));
  }

  private bool SwigDirectorMethodAddConvexHullsFromFile__SWIG_1(global::System.IntPtr material, global::System.IntPtr mstream, global::System.IntPtr pos) {
    return AddConvexHullsFromFile((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), new ChStreamInAscii(mstream, false), new ChVectorD(pos, false));
  }

  private bool SwigDirectorMethodAddConvexHullsFromFile__SWIG_2(global::System.IntPtr material, global::System.IntPtr mstream) {
    return AddConvexHullsFromFile((material == global::System.IntPtr.Zero) ? null : new ChMaterialSurface(material, true), new ChStreamInAscii(mstream, false));
  }

  private void SwigDirectorMethodSetContactable(global::System.IntPtr mc) {
    SetContactable((mc == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ChContactable(mc, false));
  }

  private void SwigDirectorMethodSyncPosition() {
    SyncPosition();
  }

  private void SwigDirectorMethodSetFamily(int mfamily) {
    SetFamily(mfamily);
  }

  private int SwigDirectorMethodGetFamily() {
    return GetFamily();
  }

  private void SwigDirectorMethodSetFamilyMaskNoCollisionWithFamily(int mfamily) {
    SetFamilyMaskNoCollisionWithFamily(mfamily);
  }

  private void SwigDirectorMethodSetFamilyMaskDoCollisionWithFamily(int mfamily) {
    SetFamilyMaskDoCollisionWithFamily(mfamily);
  }

  private bool SwigDirectorMethodGetFamilyMaskDoesCollisionWithFamily(int mfamily) {
    return GetFamilyMaskDoesCollisionWithFamily(mfamily);
  }

  private short SwigDirectorMethodGetFamilyGroup() {
    return GetFamilyGroup();
  }

  private void SwigDirectorMethodSetFamilyGroup(short group) {
    SetFamilyGroup(group);
  }

  private short SwigDirectorMethodGetFamilyMask() {
    return GetFamilyMask();
  }

  private void SwigDirectorMethodSetFamilyMask(short mask) {
    SetFamilyMask(mask);
  }

  private void SwigDirectorMethodSetSafeMargin(double amargin) {
    SetSafeMargin(amargin);
  }

  private float SwigDirectorMethodGetSafeMargin() {
    return GetSafeMargin();
  }

  private void SwigDirectorMethodSetEnvelope(double amargin) {
    SetEnvelope(amargin);
  }

  private float SwigDirectorMethodGetEnvelope() {
    return GetEnvelope();
  }

  private void SwigDirectorMethodGetAABB(global::System.IntPtr bbmin, global::System.IntPtr bbmax) {
    GetAABB(new ChVectorD(bbmin, false), new ChVectorD(bbmax, false));
  }

  private void SwigDirectorMethodArchiveOUT(global::System.IntPtr marchive) {
    ArchiveOUT(new SWIGTYPE_p_ChArchiveOut(marchive, false));
  }

  private void SwigDirectorMethodArchiveIN(global::System.IntPtr marchive) {
    ArchiveIN(new SWIGTYPE_p_chrono__ChArchiveIn(marchive, false));
  }

  private global::System.IntPtr SwigDirectorMethodGetShapePos(int index) {
    return ChCoordsysD.getCPtr(GetShapePos(index)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGetShapeDimensions(int index) {
    return SWIGTYPE_p_std__vectorT_double_t.getCPtr(GetShapeDimensions(index)).Handle;
  }

  private float SwigDirectorMethodGetSuggestedFullMargin() {
    return GetSuggestedFullMargin();
  }

  public delegate int SwigDelegateChCollisionModel_0();
  public delegate int SwigDelegateChCollisionModel_1();
  public delegate bool SwigDelegateChCollisionModel_2(global::System.IntPtr material, double radius, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_3(global::System.IntPtr material, double radius);
  public delegate bool SwigDelegateChCollisionModel_4(global::System.IntPtr material, double rx, double ry, double rz, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_5(global::System.IntPtr material, double rx, double ry, double rz, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_6(global::System.IntPtr material, double rx, double ry, double rz);
  public delegate bool SwigDelegateChCollisionModel_7(global::System.IntPtr material, double hx, double hy, double hz, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_8(global::System.IntPtr material, double hx, double hy, double hz, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_9(global::System.IntPtr material, double hx, double hy, double hz);
  public delegate bool SwigDelegateChCollisionModel_10(global::System.IntPtr material, double rx, double rz, double hy, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_11(global::System.IntPtr material, double rx, double rz, double hy, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_12(global::System.IntPtr material, double rx, double rz, double hy);
  public delegate bool SwigDelegateChCollisionModel_13(global::System.IntPtr material, double rx, double rz, double hy, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_14(global::System.IntPtr material, double rx, double rz, double hy, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_15(global::System.IntPtr material, double rx, double rz, double hy);
  public delegate bool SwigDelegateChCollisionModel_16(global::System.IntPtr material, double radius, double hlen, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_17(global::System.IntPtr material, double radius, double hlen, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_18(global::System.IntPtr material, double radius, double hlen);
  public delegate bool SwigDelegateChCollisionModel_19(global::System.IntPtr material, double hx, double hy, double hz, double sphere_r, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_20(global::System.IntPtr material, double hx, double hy, double hz, double sphere_r, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_21(global::System.IntPtr material, double hx, double hy, double hz, double sphere_r);
  public delegate bool SwigDelegateChCollisionModel_22(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_23(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_24(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r);
  public delegate bool SwigDelegateChCollisionModel_25(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_26(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_27(global::System.IntPtr material, double rx, double rz, double hy, double sphere_r);
  public delegate bool SwigDelegateChCollisionModel_28(global::System.IntPtr material, global::System.IntPtr pointlist, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_29(global::System.IntPtr material, global::System.IntPtr pointlist, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_30(global::System.IntPtr material, global::System.IntPtr pointlist);
  public delegate bool SwigDelegateChCollisionModel_31(global::System.IntPtr material, global::System.IntPtr trimesh, bool is_static, bool is_convex, global::System.IntPtr pos, global::System.IntPtr rot, double sphereswept_thickness);
  public delegate bool SwigDelegateChCollisionModel_32(global::System.IntPtr material, global::System.IntPtr trimesh, bool is_static, bool is_convex, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_33(global::System.IntPtr material, global::System.IntPtr trimesh, bool is_static, bool is_convex, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_34(global::System.IntPtr material, global::System.IntPtr trimesh, bool is_static, bool is_convex);
  public delegate bool SwigDelegateChCollisionModel_35(global::System.IntPtr material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_36(global::System.IntPtr material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_37(global::System.IntPtr material, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset);
  public delegate bool SwigDelegateChCollisionModel_38(global::System.IntPtr material, global::System.IntPtr mpath, global::System.IntPtr pos, global::System.IntPtr rot, double thickness);
  public delegate bool SwigDelegateChCollisionModel_39(global::System.IntPtr material, global::System.IntPtr mpath, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_40(global::System.IntPtr material, global::System.IntPtr mpath, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_41(global::System.IntPtr material, global::System.IntPtr mpath);
  public delegate bool SwigDelegateChCollisionModel_42(global::System.IntPtr material, double radius, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_43(global::System.IntPtr material, double radius);
  public delegate bool SwigDelegateChCollisionModel_44(global::System.IntPtr material);
  public delegate bool SwigDelegateChCollisionModel_45(global::System.IntPtr another);
  public delegate bool SwigDelegateChCollisionModel_46(global::System.IntPtr material, global::System.IntPtr mstream, global::System.IntPtr pos, global::System.IntPtr rot);
  public delegate bool SwigDelegateChCollisionModel_47(global::System.IntPtr material, global::System.IntPtr mstream, global::System.IntPtr pos);
  public delegate bool SwigDelegateChCollisionModel_48(global::System.IntPtr material, global::System.IntPtr mstream);
  public delegate void SwigDelegateChCollisionModel_49(global::System.IntPtr mc);
  public delegate void SwigDelegateChCollisionModel_50();
  public delegate void SwigDelegateChCollisionModel_51(int mfamily);
  public delegate int SwigDelegateChCollisionModel_52();
  public delegate void SwigDelegateChCollisionModel_53(int mfamily);
  public delegate void SwigDelegateChCollisionModel_54(int mfamily);
  public delegate bool SwigDelegateChCollisionModel_55(int mfamily);
  public delegate short SwigDelegateChCollisionModel_56();
  public delegate void SwigDelegateChCollisionModel_57(short group);
  public delegate short SwigDelegateChCollisionModel_58();
  public delegate void SwigDelegateChCollisionModel_59(short mask);
  public delegate void SwigDelegateChCollisionModel_60(double amargin);
  public delegate float SwigDelegateChCollisionModel_61();
  public delegate void SwigDelegateChCollisionModel_62(double amargin);
  public delegate float SwigDelegateChCollisionModel_63();
  public delegate void SwigDelegateChCollisionModel_64(global::System.IntPtr bbmin, global::System.IntPtr bbmax);
  public delegate void SwigDelegateChCollisionModel_65(global::System.IntPtr marchive);
  public delegate void SwigDelegateChCollisionModel_66(global::System.IntPtr marchive);
  public delegate global::System.IntPtr SwigDelegateChCollisionModel_67(int index);
  public delegate global::System.IntPtr SwigDelegateChCollisionModel_68(int index);
  public delegate float SwigDelegateChCollisionModel_69();

  private SwigDelegateChCollisionModel_0 swigDelegate0;
  private SwigDelegateChCollisionModel_1 swigDelegate1;
  private SwigDelegateChCollisionModel_2 swigDelegate2;
  private SwigDelegateChCollisionModel_3 swigDelegate3;
  private SwigDelegateChCollisionModel_4 swigDelegate4;
  private SwigDelegateChCollisionModel_5 swigDelegate5;
  private SwigDelegateChCollisionModel_6 swigDelegate6;
  private SwigDelegateChCollisionModel_7 swigDelegate7;
  private SwigDelegateChCollisionModel_8 swigDelegate8;
  private SwigDelegateChCollisionModel_9 swigDelegate9;
  private SwigDelegateChCollisionModel_10 swigDelegate10;
  private SwigDelegateChCollisionModel_11 swigDelegate11;
  private SwigDelegateChCollisionModel_12 swigDelegate12;
  private SwigDelegateChCollisionModel_13 swigDelegate13;
  private SwigDelegateChCollisionModel_14 swigDelegate14;
  private SwigDelegateChCollisionModel_15 swigDelegate15;
  private SwigDelegateChCollisionModel_16 swigDelegate16;
  private SwigDelegateChCollisionModel_17 swigDelegate17;
  private SwigDelegateChCollisionModel_18 swigDelegate18;
  private SwigDelegateChCollisionModel_19 swigDelegate19;
  private SwigDelegateChCollisionModel_20 swigDelegate20;
  private SwigDelegateChCollisionModel_21 swigDelegate21;
  private SwigDelegateChCollisionModel_22 swigDelegate22;
  private SwigDelegateChCollisionModel_23 swigDelegate23;
  private SwigDelegateChCollisionModel_24 swigDelegate24;
  private SwigDelegateChCollisionModel_25 swigDelegate25;
  private SwigDelegateChCollisionModel_26 swigDelegate26;
  private SwigDelegateChCollisionModel_27 swigDelegate27;
  private SwigDelegateChCollisionModel_28 swigDelegate28;
  private SwigDelegateChCollisionModel_29 swigDelegate29;
  private SwigDelegateChCollisionModel_30 swigDelegate30;
  private SwigDelegateChCollisionModel_31 swigDelegate31;
  private SwigDelegateChCollisionModel_32 swigDelegate32;
  private SwigDelegateChCollisionModel_33 swigDelegate33;
  private SwigDelegateChCollisionModel_34 swigDelegate34;
  private SwigDelegateChCollisionModel_35 swigDelegate35;
  private SwigDelegateChCollisionModel_36 swigDelegate36;
  private SwigDelegateChCollisionModel_37 swigDelegate37;
  private SwigDelegateChCollisionModel_38 swigDelegate38;
  private SwigDelegateChCollisionModel_39 swigDelegate39;
  private SwigDelegateChCollisionModel_40 swigDelegate40;
  private SwigDelegateChCollisionModel_41 swigDelegate41;
  private SwigDelegateChCollisionModel_42 swigDelegate42;
  private SwigDelegateChCollisionModel_43 swigDelegate43;
  private SwigDelegateChCollisionModel_44 swigDelegate44;
  private SwigDelegateChCollisionModel_45 swigDelegate45;
  private SwigDelegateChCollisionModel_46 swigDelegate46;
  private SwigDelegateChCollisionModel_47 swigDelegate47;
  private SwigDelegateChCollisionModel_48 swigDelegate48;
  private SwigDelegateChCollisionModel_49 swigDelegate49;
  private SwigDelegateChCollisionModel_50 swigDelegate50;
  private SwigDelegateChCollisionModel_51 swigDelegate51;
  private SwigDelegateChCollisionModel_52 swigDelegate52;
  private SwigDelegateChCollisionModel_53 swigDelegate53;
  private SwigDelegateChCollisionModel_54 swigDelegate54;
  private SwigDelegateChCollisionModel_55 swigDelegate55;
  private SwigDelegateChCollisionModel_56 swigDelegate56;
  private SwigDelegateChCollisionModel_57 swigDelegate57;
  private SwigDelegateChCollisionModel_58 swigDelegate58;
  private SwigDelegateChCollisionModel_59 swigDelegate59;
  private SwigDelegateChCollisionModel_60 swigDelegate60;
  private SwigDelegateChCollisionModel_61 swigDelegate61;
  private SwigDelegateChCollisionModel_62 swigDelegate62;
  private SwigDelegateChCollisionModel_63 swigDelegate63;
  private SwigDelegateChCollisionModel_64 swigDelegate64;
  private SwigDelegateChCollisionModel_65 swigDelegate65;
  private SwigDelegateChCollisionModel_66 swigDelegate66;
  private SwigDelegateChCollisionModel_67 swigDelegate67;
  private SwigDelegateChCollisionModel_68 swigDelegate68;
  private SwigDelegateChCollisionModel_69 swigDelegate69;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes23 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes24 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes25 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes26 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes27 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes28 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(vector_ChVectorD), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes29 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(vector_ChVectorD), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes30 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(vector_ChVectorD) };
  private static global::System.Type[] swigMethodTypes31 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChTriangleMesh), typeof(bool), typeof(bool), typeof(ChVectorD), typeof(ChMatrix33D), typeof(double) };
  private static global::System.Type[] swigMethodTypes32 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChTriangleMesh), typeof(bool), typeof(bool), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes33 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChTriangleMesh), typeof(bool), typeof(bool), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes34 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChTriangleMesh), typeof(bool), typeof(bool) };
  private static global::System.Type[] swigMethodTypes35 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes36 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes37 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(double), typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes38 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChLinePath), typeof(ChVectorD), typeof(ChMatrix33D), typeof(double) };
  private static global::System.Type[] swigMethodTypes39 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChLinePath), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes40 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChLinePath), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes41 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChLinePath) };
  private static global::System.Type[] swigMethodTypes42 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes43 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(double) };
  private static global::System.Type[] swigMethodTypes44 = new global::System.Type[] { typeof(ChMaterialSurface) };
  private static global::System.Type[] swigMethodTypes45 = new global::System.Type[] { typeof(ChCollisionModel) };
  private static global::System.Type[] swigMethodTypes46 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChStreamInAscii), typeof(ChVectorD), typeof(ChMatrix33D) };
  private static global::System.Type[] swigMethodTypes47 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChStreamInAscii), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes48 = new global::System.Type[] { typeof(ChMaterialSurface), typeof(ChStreamInAscii) };
  private static global::System.Type[] swigMethodTypes49 = new global::System.Type[] { typeof(SWIGTYPE_p_ChContactable) };
  private static global::System.Type[] swigMethodTypes50 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes51 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes52 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes53 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes54 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes55 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes56 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes57 = new global::System.Type[] { typeof(short) };
  private static global::System.Type[] swigMethodTypes58 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes59 = new global::System.Type[] { typeof(short) };
  private static global::System.Type[] swigMethodTypes60 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes61 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes62 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes63 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes64 = new global::System.Type[] { typeof(ChVectorD), typeof(ChVectorD) };
  private static global::System.Type[] swigMethodTypes65 = new global::System.Type[] { typeof(SWIGTYPE_p_ChArchiveOut) };
  private static global::System.Type[] swigMethodTypes66 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveIn) };
  private static global::System.Type[] swigMethodTypes67 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes68 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes69 = new global::System.Type[] {  };
}
