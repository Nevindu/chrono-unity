//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoadXYZnodeBodySpring : ChLoadXYZnodeBody {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLoadXYZnodeBodySpring(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoadXYZnodeBodySpring obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ChronoEngine_csharpPINVOKE.delete_ChLoadXYZnodeBodySpring(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLoadXYZnodeBodySpring(SWIGTYPE_p_std__shared_ptrT_ChNodeXYZ_t mnodeA, ChBody mbodyB, double mK, double mR, double mD0) : this(ChronoEngine_csharpPINVOKE.new_ChLoadXYZnodeBodySpring__SWIG_0(SWIGTYPE_p_std__shared_ptrT_ChNodeXYZ_t.getCPtr(mnodeA), ChBody.getCPtr(mbodyB), mK, mR, mD0), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLoadXYZnodeBodySpring(SWIGTYPE_p_std__shared_ptrT_ChNodeXYZ_t mnodeA, ChBody mbodyB, double mK, double mR) : this(ChronoEngine_csharpPINVOKE.new_ChLoadXYZnodeBodySpring__SWIG_1(SWIGTYPE_p_std__shared_ptrT_ChNodeXYZ_t.getCPtr(mnodeA), ChBody.getCPtr(mbodyB), mK, mR), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChObj Clone() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_Clone(swigCPtr);
    ChLoadXYZnodeBodySpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadXYZnodeBodySpring(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ComputeForce(ChFrameMovingD rel_AB, ChVectorD loc_force) {
    ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_ComputeForce(swigCPtr, ChFrameMovingD.getCPtr(rel_AB), ChVectorD.getCPtr(loc_force));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStiffness(double mstiffness) {
    ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_SetStiffness(swigCPtr, mstiffness);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetStiffness() {
    double ret = ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_GetStiffness(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDamping(double mdamping) {
    ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_SetDamping(swigCPtr, mdamping);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetDamping() {
    double ret = ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_GetDamping(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRestLength(double mrest) {
    ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_SetRestLength(swigCPtr, mrest);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRestLength() {
    double ret = ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_GetRestLength(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStiff(bool ms) {
    ChronoEngine_csharpPINVOKE.ChLoadXYZnodeBodySpring_SetStiff(swigCPtr, ms);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

}
