//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class HMMWV_ReissnerTire : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal HMMWV_ReissnerTire(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HMMWV_ReissnerTire obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HMMWV_ReissnerTire() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          vehiclePINVOKE.delete_HMMWV_ReissnerTire(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public HMMWV_ReissnerTire(string name) : this(vehiclePINVOKE.new_HMMWV_ReissnerTire(name), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetRadius() {
    double ret = vehiclePINVOKE.HMMWV_ReissnerTire_GetRadius(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetRimRadius() {
    double ret = vehiclePINVOKE.HMMWV_ReissnerTire_GetRimRadius(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetWidth() {
    double ret = vehiclePINVOKE.HMMWV_ReissnerTire_GetWidth(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDefaultPressure() {
    double ret = vehiclePINVOKE.HMMWV_ReissnerTire_GetDefaultPressure(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__fea__ChNodeFEAbase_t_t GetConnectedNodes() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__fea__ChNodeFEAbase_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__fea__ChNodeFEAbase_t_t(vehiclePINVOKE.HMMWV_ReissnerTire_GetConnectedNodes(swigCPtr), true);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CreateMesh(ChFrameMovingD wheel_frame, VehicleSide side) {
    vehiclePINVOKE.HMMWV_ReissnerTire_CreateMesh(swigCPtr, ChFrameMovingD.getCPtr(wheel_frame), (int)side);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
