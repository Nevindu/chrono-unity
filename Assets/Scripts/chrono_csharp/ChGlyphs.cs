//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChGlyphs : ChVisualShape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChGlyphs(global::System.IntPtr cPtr, bool cMemoryOwn) : base(corePINVOKE.ChGlyphs_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChGlyphs obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          corePINVOKE.delete_ChGlyphs(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChGlyphs() : this(corePINVOKE.new_ChGlyphs(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChGlyphs.eCh_GlyphType GetDrawMode() {
    ChGlyphs.eCh_GlyphType ret = (ChGlyphs.eCh_GlyphType)corePINVOKE.ChGlyphs_GetDrawMode(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDrawMode(ChGlyphs.eCh_GlyphType mmode) {
    corePINVOKE.ChGlyphs_SetDrawMode(swigCPtr, (int)mmode);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reserve(uint n_glyphs) {
    corePINVOKE.ChGlyphs_Reserve(swigCPtr, n_glyphs);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumberOfGlyphs() {
    uint ret = corePINVOKE.ChGlyphs_GetNumberOfGlyphs(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetGlyphsSize() {
    double ret = corePINVOKE.ChGlyphs_GetGlyphsSize(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetGlyphsSize(double msize) {
    corePINVOKE.ChGlyphs_SetGlyphsSize(swigCPtr, msize);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetZbufferHide(bool mhide) {
    corePINVOKE.ChGlyphs_SetZbufferHide(swigCPtr, mhide);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetZbufferHide() {
    bool ret = corePINVOKE.ChGlyphs_GetZbufferHide(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetGlyphPoint(uint id, ChVectorD mpoint, ChColor mcolor) {
    corePINVOKE.ChGlyphs_SetGlyphPoint__SWIG_0(swigCPtr, id, ChVectorD.getCPtr(mpoint), ChColor.getCPtr(mcolor));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphPoint(uint id, ChVectorD mpoint) {
    corePINVOKE.ChGlyphs_SetGlyphPoint__SWIG_1(swigCPtr, id, ChVectorD.getCPtr(mpoint));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphVector(uint id, ChVectorD mpoint, ChVectorD mvector, ChColor mcolor) {
    corePINVOKE.ChGlyphs_SetGlyphVector__SWIG_0(swigCPtr, id, ChVectorD.getCPtr(mpoint), ChVectorD.getCPtr(mvector), ChColor.getCPtr(mcolor));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphVector(uint id, ChVectorD mpoint, ChVectorD mvector) {
    corePINVOKE.ChGlyphs_SetGlyphVector__SWIG_1(swigCPtr, id, ChVectorD.getCPtr(mpoint), ChVectorD.getCPtr(mvector));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphCoordsys(uint id, ChCoordsysD mcoord) {
    corePINVOKE.ChGlyphs_SetGlyphCoordsys(swigCPtr, id, ChCoordsysD.getCPtr(mcoord));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOUT(SWIGTYPE_p_ChArchiveOut marchive) {
    corePINVOKE.ChGlyphs_ArchiveOUT(swigCPtr, SWIGTYPE_p_ChArchiveOut.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIN(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    corePINVOKE.ChGlyphs_ArchiveIN(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public vector_ChVectorD points {
    set {
      corePINVOKE.ChGlyphs_points_set(swigCPtr, vector_ChVectorD.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChGlyphs_points_get(swigCPtr);
      vector_ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVectorD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_chrono__ChColor_t colors {
    set {
      corePINVOKE.ChGlyphs_colors_set(swigCPtr, SWIGTYPE_p_std__vectorT_chrono__ChColor_t.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChGlyphs_colors_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_chrono__ChColor_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_chrono__ChColor_t(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVectorD vectors {
    set {
      corePINVOKE.ChGlyphs_vectors_set(swigCPtr, vector_ChVectorD.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChGlyphs_vectors_get(swigCPtr);
      vector_ChVectorD ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVectorD(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_chrono__ChQuaternionT_double_t_t rotations {
    set {
      corePINVOKE.ChGlyphs_rotations_set(swigCPtr, SWIGTYPE_p_std__vectorT_chrono__ChQuaternionT_double_t_t.getCPtr(value));
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = corePINVOKE.ChGlyphs_rotations_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_chrono__ChQuaternionT_double_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_chrono__ChQuaternionT_double_t_t(cPtr, false);
      if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public enum eCh_GlyphType {
    GLYPH_POINT = 0,
    GLYPH_VECTOR,
    GLYPH_COORDSYS
  }

}
