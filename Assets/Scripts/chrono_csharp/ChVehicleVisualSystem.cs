//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVehicleVisualSystem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChVehicleVisualSystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVehicleVisualSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChVehicleVisualSystem() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          vehiclePINVOKE.delete_ChVehicleVisualSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChVehicleVisualSystem() : this(vehiclePINVOKE.new_ChVehicleVisualSystem(), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChaseCamera(ChVectorD ptOnChassis, double chaseDist, double chaseHeight) {
    vehiclePINVOKE.ChVehicleVisualSystem_SetChaseCamera(swigCPtr, ChVectorD.getCPtr(ptOnChassis), chaseDist, chaseHeight);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStepsize(double val) {
    vehiclePINVOKE.ChVehicleVisualSystem_SetStepsize(swigCPtr, val);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChaseCameraState(ChChaseCamera.State state) {
    vehiclePINVOKE.ChVehicleVisualSystem_SetChaseCameraState(swigCPtr, (int)state);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChaseCameraPosition(ChVectorD pos) {
    vehiclePINVOKE.ChVehicleVisualSystem_SetChaseCameraPosition(swigCPtr, ChVectorD.getCPtr(pos));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChaseCameraAngle(double angle) {
    vehiclePINVOKE.ChVehicleVisualSystem_SetChaseCameraAngle(swigCPtr, angle);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChaseCameraMultipliers(double minMult, double maxMult) {
    vehiclePINVOKE.ChVehicleVisualSystem_SetChaseCameraMultipliers(swigCPtr, minMult, maxMult);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Synchronize(string msg, DriverInputs driver_inputs) {
    vehiclePINVOKE.ChVehicleVisualSystem_Synchronize(swigCPtr, msg, DriverInputs.getCPtr(driver_inputs));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
