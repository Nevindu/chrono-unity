//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChCollisionUtils : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChCollisionUtils(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChCollisionUtils obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChCollisionUtils() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ChronoEngine_csharpPINVOKE.delete_ChCollisionUtils(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool LineLineIntersect(ChVectorD p1, ChVectorD p2, ChVectorD p3, ChVectorD p4, ChVectorD pa, ChVectorD pb, SWIGTYPE_p_double mua, SWIGTYPE_p_double mub) {
    bool ret = ChronoEngine_csharpPINVOKE.ChCollisionUtils_LineLineIntersect(ChVectorD.getCPtr(p1), ChVectorD.getCPtr(p2), ChVectorD.getCPtr(p3), ChVectorD.getCPtr(p4), ChVectorD.getCPtr(pa), ChVectorD.getCPtr(pb), SWIGTYPE_p_double.getCPtr(mua), SWIGTYPE_p_double.getCPtr(mub));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double PointLineDistance(ChVectorD p, ChVectorD dA, ChVectorD dB, SWIGTYPE_p_double mu, SWIGTYPE_p_int is_insegment) {
    double ret = ChronoEngine_csharpPINVOKE.ChCollisionUtils_PointLineDistance(ChVectorD.getCPtr(p), ChVectorD.getCPtr(dA), ChVectorD.getCPtr(dB), SWIGTYPE_p_double.getCPtr(mu), SWIGTYPE_p_int.getCPtr(is_insegment));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double PointTriangleDistance(ChVectorD B, ChVectorD A1, ChVectorD A2, ChVectorD A3, SWIGTYPE_p_double mu, SWIGTYPE_p_double mv, SWIGTYPE_p_int is_into, ChVectorD Bprojected) {
    double ret = ChronoEngine_csharpPINVOKE.ChCollisionUtils_PointTriangleDistance(ChVectorD.getCPtr(B), ChVectorD.getCPtr(A1), ChVectorD.getCPtr(A2), ChVectorD.getCPtr(A3), SWIGTYPE_p_double.getCPtr(mu), SWIGTYPE_p_double.getCPtr(mv), SWIGTYPE_p_int.getCPtr(is_into), ChVectorD.getCPtr(Bprojected));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCollisionUtils() : this(ChronoEngine_csharpPINVOKE.new_ChCollisionUtils(), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

}
