//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVisualMaterial : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChVisualMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVisualMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChVisualMaterial() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          corePINVOKE.delete_ChVisualMaterial(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChVisualMaterial() : this(corePINVOKE.new_ChVisualMaterial(), true) {
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAmbientColor(ChColor rgb) {
    corePINVOKE.ChVisualMaterial_SetAmbientColor(swigCPtr, ChColor.getCPtr(rgb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDiffuseColor(ChColor rgb) {
    corePINVOKE.ChVisualMaterial_SetDiffuseColor(swigCPtr, ChColor.getCPtr(rgb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpecularColor(ChColor rgb) {
    corePINVOKE.ChVisualMaterial_SetSpecularColor(swigCPtr, ChColor.getCPtr(rgb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetEmissiveColor(ChColor rgb) {
    corePINVOKE.ChVisualMaterial_SetEmissiveColor(swigCPtr, ChColor.getCPtr(rgb));
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpecularExponent(float exponent) {
    corePINVOKE.ChVisualMaterial_SetSpecularExponent(swigCPtr, exponent);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOpacity(float o) {
    corePINVOKE.ChVisualMaterial_SetOpacity(swigCPtr, o);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIllumination(int i) {
    corePINVOKE.ChVisualMaterial_SetIllumination(swigCPtr, i);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKdTexture(string filename, float scale_x, float scale_y) {
    corePINVOKE.ChVisualMaterial_SetKdTexture__SWIG_0(swigCPtr, filename, scale_x, scale_y);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKdTexture(string filename, float scale_x) {
    corePINVOKE.ChVisualMaterial_SetKdTexture__SWIG_1(swigCPtr, filename, scale_x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKdTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetKdTexture__SWIG_2(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKsTexture(string filename, float scale_x, float scale_y) {
    corePINVOKE.ChVisualMaterial_SetKsTexture__SWIG_0(swigCPtr, filename, scale_x, scale_y);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKsTexture(string filename, float scale_x) {
    corePINVOKE.ChVisualMaterial_SetKsTexture__SWIG_1(swigCPtr, filename, scale_x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKsTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetKsTexture__SWIG_2(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNormalMapTexture(string filename, float scale_x, float scale_y) {
    corePINVOKE.ChVisualMaterial_SetNormalMapTexture__SWIG_0(swigCPtr, filename, scale_x, scale_y);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNormalMapTexture(string filename, float scale_x) {
    corePINVOKE.ChVisualMaterial_SetNormalMapTexture__SWIG_1(swigCPtr, filename, scale_x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNormalMapTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetNormalMapTexture__SWIG_2(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMetallicTexture(string filename, float scale_x, float scale_y) {
    corePINVOKE.ChVisualMaterial_SetMetallicTexture__SWIG_0(swigCPtr, filename, scale_x, scale_y);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMetallicTexture(string filename, float scale_x) {
    corePINVOKE.ChVisualMaterial_SetMetallicTexture__SWIG_1(swigCPtr, filename, scale_x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMetallicTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetMetallicTexture__SWIG_2(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoughnessTexture(string filename, float scale_x, float scale_y) {
    corePINVOKE.ChVisualMaterial_SetRoughnessTexture__SWIG_0(swigCPtr, filename, scale_x, scale_y);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoughnessTexture(string filename, float scale_x) {
    corePINVOKE.ChVisualMaterial_SetRoughnessTexture__SWIG_1(swigCPtr, filename, scale_x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoughnessTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetRoughnessTexture__SWIG_2(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOpacityTexture(string filename, float scale_x, float scale_y) {
    corePINVOKE.ChVisualMaterial_SetOpacityTexture__SWIG_0(swigCPtr, filename, scale_x, scale_y);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOpacityTexture(string filename, float scale_x) {
    corePINVOKE.ChVisualMaterial_SetOpacityTexture__SWIG_1(swigCPtr, filename, scale_x);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOpacityTexture(string filename) {
    corePINVOKE.ChVisualMaterial_SetOpacityTexture__SWIG_2(swigCPtr, filename);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFresnelExp(float exp) {
    corePINVOKE.ChVisualMaterial_SetFresnelExp(swigCPtr, exp);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFresnelMax(float max) {
    corePINVOKE.ChVisualMaterial_SetFresnelMax(swigCPtr, max);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFresnelMin(float min) {
    corePINVOKE.ChVisualMaterial_SetFresnelMin(swigCPtr, min);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoughness(float r) {
    corePINVOKE.ChVisualMaterial_SetRoughness(swigCPtr, r);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMetallic(float m) {
    corePINVOKE.ChVisualMaterial_SetMetallic(swigCPtr, m);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUseSpecularWorkflow(bool s) {
    corePINVOKE.ChVisualMaterial_SetUseSpecularWorkflow(swigCPtr, s);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetClassID(ushort id) {
    corePINVOKE.ChVisualMaterial_SetClassID(swigCPtr, id);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInstanceID(ushort id) {
    corePINVOKE.ChVisualMaterial_SetInstanceID(swigCPtr, id);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChColor GetAmbientColor() {
    ChColor ret = new ChColor(corePINVOKE.ChVisualMaterial_GetAmbientColor(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChColor GetDiffuseColor() {
    ChColor ret = new ChColor(corePINVOKE.ChVisualMaterial_GetDiffuseColor(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChColor GetSpecularColor() {
    ChColor ret = new ChColor(corePINVOKE.ChVisualMaterial_GetSpecularColor(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChColor GetEmissiveColor() {
    ChColor ret = new ChColor(corePINVOKE.ChVisualMaterial_GetEmissiveColor(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetSpecularExponent() {
    float ret = corePINVOKE.ChVisualMaterial_GetSpecularExponent(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetOpacity() {
    float ret = corePINVOKE.ChVisualMaterial_GetOpacity(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetIllumination() {
    int ret = corePINVOKE.ChVisualMaterial_GetIllumination(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetKdTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetKdTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetKsTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetKsTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetNormalMapTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetNormalMapTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetMetallicTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetMetallicTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetRoughnessTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetRoughnessTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetOpacityTexture() {
    string ret = corePINVOKE.ChVisualMaterial_GetOpacityTexture(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChVector2T_float_t GetKdTextureScale() {
    SWIGTYPE_p_ChVector2T_float_t ret = new SWIGTYPE_p_ChVector2T_float_t(corePINVOKE.ChVisualMaterial_GetKdTextureScale(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChVector2T_float_t GetKsTextureScale() {
    SWIGTYPE_p_ChVector2T_float_t ret = new SWIGTYPE_p_ChVector2T_float_t(corePINVOKE.ChVisualMaterial_GetKsTextureScale(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChVector2T_float_t GetNormalMapTextureScale() {
    SWIGTYPE_p_ChVector2T_float_t ret = new SWIGTYPE_p_ChVector2T_float_t(corePINVOKE.ChVisualMaterial_GetNormalMapTextureScale(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChVector2T_float_t GetMetallicTextureScale() {
    SWIGTYPE_p_ChVector2T_float_t ret = new SWIGTYPE_p_ChVector2T_float_t(corePINVOKE.ChVisualMaterial_GetMetallicTextureScale(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChVector2T_float_t GetRoughnessTextureScale() {
    SWIGTYPE_p_ChVector2T_float_t ret = new SWIGTYPE_p_ChVector2T_float_t(corePINVOKE.ChVisualMaterial_GetRoughnessTextureScale(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChVector2T_float_t GetOpacityTextureScale() {
    SWIGTYPE_p_ChVector2T_float_t ret = new SWIGTYPE_p_ChVector2T_float_t(corePINVOKE.ChVisualMaterial_GetOpacityTextureScale(swigCPtr), false);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetFresnelExp() {
    float ret = corePINVOKE.ChVisualMaterial_GetFresnelExp(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetFresnelMax() {
    float ret = corePINVOKE.ChVisualMaterial_GetFresnelMax(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetFresnelMin() {
    float ret = corePINVOKE.ChVisualMaterial_GetFresnelMin(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetRoughness() {
    float ret = corePINVOKE.ChVisualMaterial_GetRoughness(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetMetallic() {
    float ret = corePINVOKE.ChVisualMaterial_GetMetallic(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetUseSpecularWorkflow() {
    bool ret = corePINVOKE.ChVisualMaterial_GetUseSpecularWorkflow(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort GetClassID() {
    ushort ret = corePINVOKE.ChVisualMaterial_GetClassID(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort GetInstanceID() {
    ushort ret = corePINVOKE.ChVisualMaterial_GetInstanceID(swigCPtr);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualMaterial Default() {
    global::System.IntPtr cPtr = corePINVOKE.ChVisualMaterial_Default();
    ChVisualMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualMaterial(cPtr, true);
    if (corePINVOKE.SWIGPendingException.Pending) throw corePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
