//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkSpring : ChLinkMarkers {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkSpring(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ChronoEngine_csharpPINVOKE.ChLinkSpring_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkSpring obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ChronoEngine_csharpPINVOKE.delete_ChLinkSpring(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkSpring() : this(ChronoEngine_csharpPINVOKE.new_ChLinkSpring__SWIG_0(), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkSpring(ChLinkSpring other) : this(ChronoEngine_csharpPINVOKE.new_ChLinkSpring__SWIG_1(ChLinkSpring.getCPtr(other)), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChObj Clone() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChLinkSpring_Clone(swigCPtr);
    ChLinkSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkSpring(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_SpringRestLength() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_SpringRestLength(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_SpringDeform() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_SpringDeform(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_SpringLength() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_SpringLength(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_SpringVelocity() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_SpringVelocity(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_SpringK() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_SpringK(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_SpringR() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_SpringR(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_SpringF() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_SpringF(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Get_SpringReact() {
    double ret = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_SpringReact(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_SpringRestLength(double m_r) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_SpringRestLength(swigCPtr, m_r);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_SpringK(double m_r) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_SpringK(swigCPtr, m_r);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_SpringR(double m_r) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_SpringR(swigCPtr, m_r);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_SpringF(double m_r) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_SpringF(swigCPtr, m_r);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction Get_mod_f_time() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_mod_f_time(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction Get_mod_k_d() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_mod_k_d(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction Get_mod_r_d() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_mod_r_d(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction Get_mod_k_speed() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_mod_k_speed(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction Get_mod_r_speed() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChLinkSpring_Get_mod_r_speed(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set_mod_f_time(ChFunction mf) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_mod_f_time(swigCPtr, ChFunction.getCPtr(mf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_mod_k_d(ChFunction mf) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_mod_k_d(swigCPtr, ChFunction.getCPtr(mf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_mod_r_d(ChFunction mf) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_mod_r_d(swigCPtr, ChFunction.getCPtr(mf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_mod_k_speed(ChFunction mf) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_mod_k_speed(swigCPtr, ChFunction.getCPtr(mf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set_mod_r_speed(ChFunction mf) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Set_mod_r_speed(swigCPtr, ChFunction.getCPtr(mf));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody mbody1, ChBody mbody2, bool pos_are_relative, ChVectorD mpos1, ChVectorD mpos2, bool auto_rest_length, double mrest_length) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Initialize__SWIG_0(swigCPtr, ChBody.getCPtr(mbody1), ChBody.getCPtr(mbody2), pos_are_relative, ChVectorD.getCPtr(mpos1), ChVectorD.getCPtr(mpos2), auto_rest_length, mrest_length);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody mbody1, ChBody mbody2, bool pos_are_relative, ChVectorD mpos1, ChVectorD mpos2, bool auto_rest_length) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Initialize__SWIG_1(swigCPtr, ChBody.getCPtr(mbody1), ChBody.getCPtr(mbody2), pos_are_relative, ChVectorD.getCPtr(mpos1), ChVectorD.getCPtr(mpos2), auto_rest_length);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody mbody1, ChBody mbody2, bool pos_are_relative, ChVectorD mpos1, ChVectorD mpos2) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_Initialize__SWIG_2(swigCPtr, ChBody.getCPtr(mbody1), ChBody.getCPtr(mbody2), pos_are_relative, ChVectorD.getCPtr(mpos1), ChVectorD.getCPtr(mpos2));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD GetEndPoint1Rel() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChLinkSpring_GetEndPoint1Rel(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndPoint1Rel(ChVectorD mset) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_SetEndPoint1Rel(swigCPtr, ChVectorD.getCPtr(mset));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD GetEndPoint1Abs() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChLinkSpring_GetEndPoint1Abs(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndPoint1Abs(ChVectorD mset) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_SetEndPoint1Abs(swigCPtr, ChVectorD.getCPtr(mset));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD GetEndPoint2Rel() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChLinkSpring_GetEndPoint2Rel(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndPoint2Rel(ChVectorD mset) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_SetEndPoint2Rel(swigCPtr, ChVectorD.getCPtr(mset));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorD GetEndPoint2Abs() {
    ChVectorD ret = new ChVectorD(ChronoEngine_csharpPINVOKE.ChLinkSpring_GetEndPoint2Abs(swigCPtr), true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndPoint2Abs(ChVectorD mset) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_SetEndPoint2Abs(swigCPtr, ChVectorD.getCPtr(mset));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void UpdateForces(double mytime) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_UpdateForces(swigCPtr, mytime);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOUT(SWIGTYPE_p_ChArchiveOut marchive) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_ArchiveOUT(swigCPtr, SWIGTYPE_p_ChArchiveOut.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIN(SWIGTYPE_p_chrono__ChArchiveIn marchive) {
    ChronoEngine_csharpPINVOKE.ChLinkSpring_ArchiveIN(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(marchive));
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

}
