//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChShaftsElasticGear : ChLoadCustomMultiple {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChShaftsElasticGear(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChShaftsElasticGear obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ChronoEngine_csharpPINVOKE.delete_ChShaftsElasticGear(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChShaftsElasticGear(ChShaft mbodyA, ChShaft mbodyB, double mstiffness, double mdamping, double mRa, double mratio) : this(ChronoEngine_csharpPINVOKE.new_ChShaftsElasticGear__SWIG_0(ChShaft.getCPtr(mbodyA), ChShaft.getCPtr(mbodyB), mstiffness, mdamping, mRa, mratio), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChShaftsElasticGear(ChShaft mbodyA, ChShaft mbodyB, double mstiffness, double mdamping, double mRa) : this(ChronoEngine_csharpPINVOKE.new_ChShaftsElasticGear__SWIG_1(ChShaft.getCPtr(mbodyA), ChShaft.getCPtr(mbodyB), mstiffness, mdamping, mRa), true) {
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChObj Clone() {
    global::System.IntPtr cPtr = ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_Clone(swigCPtr);
    ChShaftsElasticGear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsElasticGear(cPtr, true);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTeethStiffness(double mstiffness) {
    ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_SetTeethStiffness(swigCPtr, mstiffness);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTeethStiffness() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_GetTeethStiffness(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTeethDamping(double mdamping) {
    ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_SetTeethDamping(swigCPtr, mdamping);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTeethDamping() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_GetTeethDamping(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRestPhase(double mphase) {
    ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_SetRestPhase(swigCPtr, mphase);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRestPhase() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_GetRestPhase(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTransmissionRatioAndRadiusA(double mt, double mRa) {
    ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_SetTransmissionRatioAndRadiusA(swigCPtr, mt, mRa);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransmissionRatioFromRadii(double mRa, double mRb, bool minternal) {
    ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_SetTransmissionRatioFromRadii__SWIG_0(swigCPtr, mRa, mRb, minternal);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransmissionRatioFromRadii(double mRa, double mRb) {
    ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_SetTransmissionRatioFromRadii__SWIG_1(swigCPtr, mRa, mRb);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTransmissionRatio() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_GetTransmissionRatio(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetGearRadiusA() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_GetGearRadiusA(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetGearRadiusB() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_GetGearRadiusB(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetContactForce() {
    double ret = ChronoEngine_csharpPINVOKE.ChShaftsElasticGear_GetContactForce(swigCPtr);
    if (ChronoEngine_csharpPINVOKE.SWIGPendingException.Pending) throw ChronoEngine_csharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
