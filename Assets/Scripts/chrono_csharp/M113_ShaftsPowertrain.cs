//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class M113_ShaftsPowertrain : ChShaftsPowertrain {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal M113_ShaftsPowertrain(global::System.IntPtr cPtr, bool cMemoryOwn) : base(vehiclePINVOKE.M113_ShaftsPowertrain_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(M113_ShaftsPowertrain obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          vehiclePINVOKE.delete_M113_ShaftsPowertrain(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public M113_ShaftsPowertrain(string name) : this(vehiclePINVOKE.new_M113_ShaftsPowertrain(name), true) {
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetGearRatios(vector_double gear_ratios) {
    vehiclePINVOKE.M113_ShaftsPowertrain_SetGearRatios(swigCPtr, vector_double.getCPtr(gear_ratios));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetMotorBlockInertia() {
    double ret = vehiclePINVOKE.M113_ShaftsPowertrain_GetMotorBlockInertia(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetCrankshaftInertia() {
    double ret = vehiclePINVOKE.M113_ShaftsPowertrain_GetCrankshaftInertia(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetIngearShaftInertia() {
    double ret = vehiclePINVOKE.M113_ShaftsPowertrain_GetIngearShaftInertia(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetUpshiftRPM() {
    double ret = vehiclePINVOKE.M113_ShaftsPowertrain_GetUpshiftRPM(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDownshiftRPM() {
    double ret = vehiclePINVOKE.M113_ShaftsPowertrain_GetDownshiftRPM(swigCPtr);
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetEngineTorqueMap(SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t map) {
    vehiclePINVOKE.M113_ShaftsPowertrain_SetEngineTorqueMap(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t.getCPtr(map));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetEngineLossesMap(SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t map) {
    vehiclePINVOKE.M113_ShaftsPowertrain_SetEngineLossesMap(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t.getCPtr(map));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetTorqueConverterCapacityFactorMap(SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t map) {
    vehiclePINVOKE.M113_ShaftsPowertrain_SetTorqueConverterCapacityFactorMap(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t.getCPtr(map));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetTorqeConverterTorqueRatioMap(SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t map) {
    vehiclePINVOKE.M113_ShaftsPowertrain_SetTorqeConverterTorqueRatioMap(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunction_Recorder_t.getCPtr(map));
    if (vehiclePINVOKE.SWIGPendingException.Pending) throw vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
